// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4A
// for tango (tango@tango-VirtualBox) on Wed Jul 11 15:03:58 2018

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef SSHCLIENTasp__Types_HH
#define SSHCLIENTasp__Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 60400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef SSHCLIENTasp__Types_HH
#endif

namespace SSHCLIENTasp__Types {

/* Forward declarations of classes */

class ASP__SSH__Close;
class ASP__SSH__Close_template;
class ASP__SSH__PseudoPrompt;
class ASP__SSH__PseudoPrompt_template;
class ASP__SSH__Status;
class ASP__SSH__Status_template;
class ASP__SSH__SetPrompt;
class ASP__SSH__SetPrompt_template;
class ASP__SSH__SetRegexPrompt;
class ASP__SSH__SetRegexPrompt_template;
class ASP__SSH__ClearPrompt;
class ASP__SSH__ClearPrompt_template;
class ASP__SSH__SetMode;
class ASP__SSH__SetMode_template;
class ASP__SSH__Connect;
class ASP__SSH__Connect_template;
class ASP__SSH__SetUserID;
class ASP__SSH__SetUserID_template;
class ASP__SSH__SetRemoteHost;
class ASP__SSH__SetRemoteHost_template;
class ASP__SSH__SetRemotePort;
class ASP__SSH__SetRemotePort_template;
class ASP__SSH__SetAdditionalParameters;
class ASP__SSH__SetAdditionalParameters_template;

} /* end of namespace */

#ifndef SSHCLIENTasp__Types_HH
#define SSHCLIENTasp__Types_HH

namespace SSHCLIENTasp__Types {

/* Type definitions */

typedef INTEGER ReadMode;
typedef INTEGER_template ReadMode_template;
typedef CHARSTRING ASP__SSH;
typedef CHARSTRING_template ASP__SSH_template;

/* Class definitions */

class ASP__SSH__Close : public Base_Type {
boolean bound_flag;
public:
ASP__SSH__Close();
ASP__SSH__Close(null_type other_value);
ASP__SSH__Close(const ASP__SSH__Close& other_value);
ASP__SSH__Close& operator=(null_type other_value);
ASP__SSH__Close& operator=(const ASP__SSH__Close& other_value);
boolean operator==(null_type other_value) const;
boolean operator==(const ASP__SSH__Close& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const ASP__SSH__Close& other_value) const { return !(*this == other_value); }
inline boolean is_bound() const { return bound_flag; }
inline boolean is_present() const { return is_bound(); }
inline boolean is_value() const { return bound_flag; }
inline void clean_up() { bound_flag = FALSE; }
inline void must_bound(const char *err_msg) const { if (!bound_flag) TTCN_error("%s", err_msg); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__Close_template : public Base_Template {
struct {
unsigned int n_values;
ASP__SSH__Close_template *list_value;
} value_list;
void copy_template(const ASP__SSH__Close_template& other_value);

public:
ASP__SSH__Close_template();
ASP__SSH__Close_template(template_sel other_value);
ASP__SSH__Close_template(null_type other_value);
ASP__SSH__Close_template(const ASP__SSH__Close& other_value);
ASP__SSH__Close_template(const OPTIONAL<ASP__SSH__Close>& other_value);
ASP__SSH__Close_template(const ASP__SSH__Close_template& other_value);
~ASP__SSH__Close_template();
void clean_up();
ASP__SSH__Close_template& operator=(template_sel other_value);
ASP__SSH__Close_template& operator=(null_type other_value);
ASP__SSH__Close_template& operator=(const ASP__SSH__Close& other_value);
ASP__SSH__Close_template& operator=(const OPTIONAL<ASP__SSH__Close>& other_value);
ASP__SSH__Close_template& operator=(const ASP__SSH__Close_template& other_value);
boolean match(null_type other_value, boolean legacy = FALSE) const;
boolean match(const ASP__SSH__Close& other_value, boolean legacy = FALSE) const;
ASP__SSH__Close valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__Close_template& list_item(unsigned int list_index) const;
void log() const;
void log_match(const ASP__SSH__Close& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__PseudoPrompt : public Base_Type {
boolean bound_flag;
public:
ASP__SSH__PseudoPrompt();
ASP__SSH__PseudoPrompt(null_type other_value);
ASP__SSH__PseudoPrompt(const ASP__SSH__PseudoPrompt& other_value);
ASP__SSH__PseudoPrompt& operator=(null_type other_value);
ASP__SSH__PseudoPrompt& operator=(const ASP__SSH__PseudoPrompt& other_value);
boolean operator==(null_type other_value) const;
boolean operator==(const ASP__SSH__PseudoPrompt& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const ASP__SSH__PseudoPrompt& other_value) const { return !(*this == other_value); }
inline boolean is_bound() const { return bound_flag; }
inline boolean is_present() const { return is_bound(); }
inline boolean is_value() const { return bound_flag; }
inline void clean_up() { bound_flag = FALSE; }
inline void must_bound(const char *err_msg) const { if (!bound_flag) TTCN_error("%s", err_msg); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__PseudoPrompt_template : public Base_Template {
struct {
unsigned int n_values;
ASP__SSH__PseudoPrompt_template *list_value;
} value_list;
void copy_template(const ASP__SSH__PseudoPrompt_template& other_value);

public:
ASP__SSH__PseudoPrompt_template();
ASP__SSH__PseudoPrompt_template(template_sel other_value);
ASP__SSH__PseudoPrompt_template(null_type other_value);
ASP__SSH__PseudoPrompt_template(const ASP__SSH__PseudoPrompt& other_value);
ASP__SSH__PseudoPrompt_template(const OPTIONAL<ASP__SSH__PseudoPrompt>& other_value);
ASP__SSH__PseudoPrompt_template(const ASP__SSH__PseudoPrompt_template& other_value);
~ASP__SSH__PseudoPrompt_template();
void clean_up();
ASP__SSH__PseudoPrompt_template& operator=(template_sel other_value);
ASP__SSH__PseudoPrompt_template& operator=(null_type other_value);
ASP__SSH__PseudoPrompt_template& operator=(const ASP__SSH__PseudoPrompt& other_value);
ASP__SSH__PseudoPrompt_template& operator=(const OPTIONAL<ASP__SSH__PseudoPrompt>& other_value);
ASP__SSH__PseudoPrompt_template& operator=(const ASP__SSH__PseudoPrompt_template& other_value);
boolean match(null_type other_value, boolean legacy = FALSE) const;
boolean match(const ASP__SSH__PseudoPrompt& other_value, boolean legacy = FALSE) const;
ASP__SSH__PseudoPrompt valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__PseudoPrompt_template& list_item(unsigned int list_index) const;
void log() const;
void log_match(const ASP__SSH__PseudoPrompt& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__Status {
  INTEGER field_status__code;
  CHARSTRING field_status__message;
public:
  ASP__SSH__Status();
  ASP__SSH__Status(const INTEGER& par_status__code,
    const CHARSTRING& par_status__message);
  ASP__SSH__Status(const ASP__SSH__Status& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__Status& operator=(const ASP__SSH__Status& other_value);
  boolean operator==(const ASP__SSH__Status& other_value) const;
  inline boolean operator!=(const ASP__SSH__Status& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& status__code()
    {return field_status__code;}
  inline const INTEGER& status__code() const
    {return field_status__code;}
  inline CHARSTRING& status__message()
    {return field_status__message;}
  inline const CHARSTRING& status__message() const
    {return field_status__message;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__Status_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__Status_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__Status& other_value);
void copy_template(const ASP__SSH__Status_template& other_value);

public:
ASP__SSH__Status_template();
ASP__SSH__Status_template(template_sel other_value);
ASP__SSH__Status_template(const ASP__SSH__Status& other_value);
ASP__SSH__Status_template(const OPTIONAL<ASP__SSH__Status>& other_value);
ASP__SSH__Status_template(const ASP__SSH__Status_template& other_value);
~ASP__SSH__Status_template();
ASP__SSH__Status_template& operator=(template_sel other_value);
ASP__SSH__Status_template& operator=(const ASP__SSH__Status& other_value);
ASP__SSH__Status_template& operator=(const OPTIONAL<ASP__SSH__Status>& other_value);
ASP__SSH__Status_template& operator=(const ASP__SSH__Status_template& other_value);
boolean match(const ASP__SSH__Status& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__Status valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__Status_template& list_item(unsigned int list_index) const;
INTEGER_template& status__code();
const INTEGER_template& status__code() const;
CHARSTRING_template& status__message();
const CHARSTRING_template& status__message() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__Status& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__SetPrompt {
  CHARSTRING field_prompt__name;
  CHARSTRING field_prompt__value;
public:
  ASP__SSH__SetPrompt();
  ASP__SSH__SetPrompt(const CHARSTRING& par_prompt__name,
    const CHARSTRING& par_prompt__value);
  ASP__SSH__SetPrompt(const ASP__SSH__SetPrompt& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__SetPrompt& operator=(const ASP__SSH__SetPrompt& other_value);
  boolean operator==(const ASP__SSH__SetPrompt& other_value) const;
  inline boolean operator!=(const ASP__SSH__SetPrompt& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& prompt__name()
    {return field_prompt__name;}
  inline const CHARSTRING& prompt__name() const
    {return field_prompt__name;}
  inline CHARSTRING& prompt__value()
    {return field_prompt__value;}
  inline const CHARSTRING& prompt__value() const
    {return field_prompt__value;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__SetPrompt_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__SetPrompt_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__SetPrompt& other_value);
void copy_template(const ASP__SSH__SetPrompt_template& other_value);

public:
ASP__SSH__SetPrompt_template();
ASP__SSH__SetPrompt_template(template_sel other_value);
ASP__SSH__SetPrompt_template(const ASP__SSH__SetPrompt& other_value);
ASP__SSH__SetPrompt_template(const OPTIONAL<ASP__SSH__SetPrompt>& other_value);
ASP__SSH__SetPrompt_template(const ASP__SSH__SetPrompt_template& other_value);
~ASP__SSH__SetPrompt_template();
ASP__SSH__SetPrompt_template& operator=(template_sel other_value);
ASP__SSH__SetPrompt_template& operator=(const ASP__SSH__SetPrompt& other_value);
ASP__SSH__SetPrompt_template& operator=(const OPTIONAL<ASP__SSH__SetPrompt>& other_value);
ASP__SSH__SetPrompt_template& operator=(const ASP__SSH__SetPrompt_template& other_value);
boolean match(const ASP__SSH__SetPrompt& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__SetPrompt valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__SetPrompt_template& list_item(unsigned int list_index) const;
CHARSTRING_template& prompt__name();
const CHARSTRING_template& prompt__name() const;
CHARSTRING_template& prompt__value();
const CHARSTRING_template& prompt__value() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__SetPrompt& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__SetRegexPrompt {
  CHARSTRING field_prompt__name;
  CHARSTRING field_prompt__value;
public:
  ASP__SSH__SetRegexPrompt();
  ASP__SSH__SetRegexPrompt(const CHARSTRING& par_prompt__name,
    const CHARSTRING& par_prompt__value);
  ASP__SSH__SetRegexPrompt(const ASP__SSH__SetRegexPrompt& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__SetRegexPrompt& operator=(const ASP__SSH__SetRegexPrompt& other_value);
  boolean operator==(const ASP__SSH__SetRegexPrompt& other_value) const;
  inline boolean operator!=(const ASP__SSH__SetRegexPrompt& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& prompt__name()
    {return field_prompt__name;}
  inline const CHARSTRING& prompt__name() const
    {return field_prompt__name;}
  inline CHARSTRING& prompt__value()
    {return field_prompt__value;}
  inline const CHARSTRING& prompt__value() const
    {return field_prompt__value;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__SetRegexPrompt_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__SetRegexPrompt_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__SetRegexPrompt& other_value);
void copy_template(const ASP__SSH__SetRegexPrompt_template& other_value);

public:
ASP__SSH__SetRegexPrompt_template();
ASP__SSH__SetRegexPrompt_template(template_sel other_value);
ASP__SSH__SetRegexPrompt_template(const ASP__SSH__SetRegexPrompt& other_value);
ASP__SSH__SetRegexPrompt_template(const OPTIONAL<ASP__SSH__SetRegexPrompt>& other_value);
ASP__SSH__SetRegexPrompt_template(const ASP__SSH__SetRegexPrompt_template& other_value);
~ASP__SSH__SetRegexPrompt_template();
ASP__SSH__SetRegexPrompt_template& operator=(template_sel other_value);
ASP__SSH__SetRegexPrompt_template& operator=(const ASP__SSH__SetRegexPrompt& other_value);
ASP__SSH__SetRegexPrompt_template& operator=(const OPTIONAL<ASP__SSH__SetRegexPrompt>& other_value);
ASP__SSH__SetRegexPrompt_template& operator=(const ASP__SSH__SetRegexPrompt_template& other_value);
boolean match(const ASP__SSH__SetRegexPrompt& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__SetRegexPrompt valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__SetRegexPrompt_template& list_item(unsigned int list_index) const;
CHARSTRING_template& prompt__name();
const CHARSTRING_template& prompt__name() const;
CHARSTRING_template& prompt__value();
const CHARSTRING_template& prompt__value() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__SetRegexPrompt& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__ClearPrompt : public Base_Type {
boolean bound_flag;
public:
ASP__SSH__ClearPrompt();
ASP__SSH__ClearPrompt(null_type other_value);
ASP__SSH__ClearPrompt(const ASP__SSH__ClearPrompt& other_value);
ASP__SSH__ClearPrompt& operator=(null_type other_value);
ASP__SSH__ClearPrompt& operator=(const ASP__SSH__ClearPrompt& other_value);
boolean operator==(null_type other_value) const;
boolean operator==(const ASP__SSH__ClearPrompt& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const ASP__SSH__ClearPrompt& other_value) const { return !(*this == other_value); }
inline boolean is_bound() const { return bound_flag; }
inline boolean is_present() const { return is_bound(); }
inline boolean is_value() const { return bound_flag; }
inline void clean_up() { bound_flag = FALSE; }
inline void must_bound(const char *err_msg) const { if (!bound_flag) TTCN_error("%s", err_msg); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__ClearPrompt_template : public Base_Template {
struct {
unsigned int n_values;
ASP__SSH__ClearPrompt_template *list_value;
} value_list;
void copy_template(const ASP__SSH__ClearPrompt_template& other_value);

public:
ASP__SSH__ClearPrompt_template();
ASP__SSH__ClearPrompt_template(template_sel other_value);
ASP__SSH__ClearPrompt_template(null_type other_value);
ASP__SSH__ClearPrompt_template(const ASP__SSH__ClearPrompt& other_value);
ASP__SSH__ClearPrompt_template(const OPTIONAL<ASP__SSH__ClearPrompt>& other_value);
ASP__SSH__ClearPrompt_template(const ASP__SSH__ClearPrompt_template& other_value);
~ASP__SSH__ClearPrompt_template();
void clean_up();
ASP__SSH__ClearPrompt_template& operator=(template_sel other_value);
ASP__SSH__ClearPrompt_template& operator=(null_type other_value);
ASP__SSH__ClearPrompt_template& operator=(const ASP__SSH__ClearPrompt& other_value);
ASP__SSH__ClearPrompt_template& operator=(const OPTIONAL<ASP__SSH__ClearPrompt>& other_value);
ASP__SSH__ClearPrompt_template& operator=(const ASP__SSH__ClearPrompt_template& other_value);
boolean match(null_type other_value, boolean legacy = FALSE) const;
boolean match(const ASP__SSH__ClearPrompt& other_value, boolean legacy = FALSE) const;
ASP__SSH__ClearPrompt valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__ClearPrompt_template& list_item(unsigned int list_index) const;
void log() const;
void log_match(const ASP__SSH__ClearPrompt& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__SetMode {
  INTEGER field_readmode;
public:
  ASP__SSH__SetMode();
  ASP__SSH__SetMode(const INTEGER& par_readmode);
  ASP__SSH__SetMode(const ASP__SSH__SetMode& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__SetMode& operator=(const ASP__SSH__SetMode& other_value);
  boolean operator==(const ASP__SSH__SetMode& other_value) const;
  inline boolean operator!=(const ASP__SSH__SetMode& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& readmode()
    {return field_readmode;}
  inline const INTEGER& readmode() const
    {return field_readmode;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__SetMode_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__SetMode_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__SetMode& other_value);
void copy_template(const ASP__SSH__SetMode_template& other_value);

public:
ASP__SSH__SetMode_template();
ASP__SSH__SetMode_template(template_sel other_value);
ASP__SSH__SetMode_template(const ASP__SSH__SetMode& other_value);
ASP__SSH__SetMode_template(const OPTIONAL<ASP__SSH__SetMode>& other_value);
ASP__SSH__SetMode_template(const ASP__SSH__SetMode_template& other_value);
~ASP__SSH__SetMode_template();
ASP__SSH__SetMode_template& operator=(template_sel other_value);
ASP__SSH__SetMode_template& operator=(const ASP__SSH__SetMode& other_value);
ASP__SSH__SetMode_template& operator=(const OPTIONAL<ASP__SSH__SetMode>& other_value);
ASP__SSH__SetMode_template& operator=(const ASP__SSH__SetMode_template& other_value);
boolean match(const ASP__SSH__SetMode& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__SetMode valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__SetMode_template& list_item(unsigned int list_index) const;
INTEGER_template& readmode();
const INTEGER_template& readmode() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__SetMode& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__Connect : public Base_Type {
boolean bound_flag;
public:
ASP__SSH__Connect();
ASP__SSH__Connect(null_type other_value);
ASP__SSH__Connect(const ASP__SSH__Connect& other_value);
ASP__SSH__Connect& operator=(null_type other_value);
ASP__SSH__Connect& operator=(const ASP__SSH__Connect& other_value);
boolean operator==(null_type other_value) const;
boolean operator==(const ASP__SSH__Connect& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const ASP__SSH__Connect& other_value) const { return !(*this == other_value); }
inline boolean is_bound() const { return bound_flag; }
inline boolean is_present() const { return is_bound(); }
inline boolean is_value() const { return bound_flag; }
inline void clean_up() { bound_flag = FALSE; }
inline void must_bound(const char *err_msg) const { if (!bound_flag) TTCN_error("%s", err_msg); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__Connect_template : public Base_Template {
struct {
unsigned int n_values;
ASP__SSH__Connect_template *list_value;
} value_list;
void copy_template(const ASP__SSH__Connect_template& other_value);

public:
ASP__SSH__Connect_template();
ASP__SSH__Connect_template(template_sel other_value);
ASP__SSH__Connect_template(null_type other_value);
ASP__SSH__Connect_template(const ASP__SSH__Connect& other_value);
ASP__SSH__Connect_template(const OPTIONAL<ASP__SSH__Connect>& other_value);
ASP__SSH__Connect_template(const ASP__SSH__Connect_template& other_value);
~ASP__SSH__Connect_template();
void clean_up();
ASP__SSH__Connect_template& operator=(template_sel other_value);
ASP__SSH__Connect_template& operator=(null_type other_value);
ASP__SSH__Connect_template& operator=(const ASP__SSH__Connect& other_value);
ASP__SSH__Connect_template& operator=(const OPTIONAL<ASP__SSH__Connect>& other_value);
ASP__SSH__Connect_template& operator=(const ASP__SSH__Connect_template& other_value);
boolean match(null_type other_value, boolean legacy = FALSE) const;
boolean match(const ASP__SSH__Connect& other_value, boolean legacy = FALSE) const;
ASP__SSH__Connect valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__Connect_template& list_item(unsigned int list_index) const;
void log() const;
void log_match(const ASP__SSH__Connect& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__SetUserID {
  CHARSTRING field_usrid;
public:
  ASP__SSH__SetUserID();
  ASP__SSH__SetUserID(const CHARSTRING& par_usrid);
  ASP__SSH__SetUserID(const ASP__SSH__SetUserID& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__SetUserID& operator=(const ASP__SSH__SetUserID& other_value);
  boolean operator==(const ASP__SSH__SetUserID& other_value) const;
  inline boolean operator!=(const ASP__SSH__SetUserID& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& usrid()
    {return field_usrid;}
  inline const CHARSTRING& usrid() const
    {return field_usrid;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__SetUserID_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__SetUserID_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__SetUserID& other_value);
void copy_template(const ASP__SSH__SetUserID_template& other_value);

public:
ASP__SSH__SetUserID_template();
ASP__SSH__SetUserID_template(template_sel other_value);
ASP__SSH__SetUserID_template(const ASP__SSH__SetUserID& other_value);
ASP__SSH__SetUserID_template(const OPTIONAL<ASP__SSH__SetUserID>& other_value);
ASP__SSH__SetUserID_template(const ASP__SSH__SetUserID_template& other_value);
~ASP__SSH__SetUserID_template();
ASP__SSH__SetUserID_template& operator=(template_sel other_value);
ASP__SSH__SetUserID_template& operator=(const ASP__SSH__SetUserID& other_value);
ASP__SSH__SetUserID_template& operator=(const OPTIONAL<ASP__SSH__SetUserID>& other_value);
ASP__SSH__SetUserID_template& operator=(const ASP__SSH__SetUserID_template& other_value);
boolean match(const ASP__SSH__SetUserID& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__SetUserID valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__SetUserID_template& list_item(unsigned int list_index) const;
CHARSTRING_template& usrid();
const CHARSTRING_template& usrid() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__SetUserID& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__SetRemoteHost {
  CHARSTRING field_remotehost;
public:
  ASP__SSH__SetRemoteHost();
  ASP__SSH__SetRemoteHost(const CHARSTRING& par_remotehost);
  ASP__SSH__SetRemoteHost(const ASP__SSH__SetRemoteHost& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__SetRemoteHost& operator=(const ASP__SSH__SetRemoteHost& other_value);
  boolean operator==(const ASP__SSH__SetRemoteHost& other_value) const;
  inline boolean operator!=(const ASP__SSH__SetRemoteHost& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& remotehost()
    {return field_remotehost;}
  inline const CHARSTRING& remotehost() const
    {return field_remotehost;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__SetRemoteHost_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__SetRemoteHost_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__SetRemoteHost& other_value);
void copy_template(const ASP__SSH__SetRemoteHost_template& other_value);

public:
ASP__SSH__SetRemoteHost_template();
ASP__SSH__SetRemoteHost_template(template_sel other_value);
ASP__SSH__SetRemoteHost_template(const ASP__SSH__SetRemoteHost& other_value);
ASP__SSH__SetRemoteHost_template(const OPTIONAL<ASP__SSH__SetRemoteHost>& other_value);
ASP__SSH__SetRemoteHost_template(const ASP__SSH__SetRemoteHost_template& other_value);
~ASP__SSH__SetRemoteHost_template();
ASP__SSH__SetRemoteHost_template& operator=(template_sel other_value);
ASP__SSH__SetRemoteHost_template& operator=(const ASP__SSH__SetRemoteHost& other_value);
ASP__SSH__SetRemoteHost_template& operator=(const OPTIONAL<ASP__SSH__SetRemoteHost>& other_value);
ASP__SSH__SetRemoteHost_template& operator=(const ASP__SSH__SetRemoteHost_template& other_value);
boolean match(const ASP__SSH__SetRemoteHost& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__SetRemoteHost valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__SetRemoteHost_template& list_item(unsigned int list_index) const;
CHARSTRING_template& remotehost();
const CHARSTRING_template& remotehost() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__SetRemoteHost& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__SetRemotePort {
  CHARSTRING field_remoteport;
public:
  ASP__SSH__SetRemotePort();
  ASP__SSH__SetRemotePort(const CHARSTRING& par_remoteport);
  ASP__SSH__SetRemotePort(const ASP__SSH__SetRemotePort& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__SetRemotePort& operator=(const ASP__SSH__SetRemotePort& other_value);
  boolean operator==(const ASP__SSH__SetRemotePort& other_value) const;
  inline boolean operator!=(const ASP__SSH__SetRemotePort& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& remoteport()
    {return field_remoteport;}
  inline const CHARSTRING& remoteport() const
    {return field_remoteport;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__SetRemotePort_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__SetRemotePort_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__SetRemotePort& other_value);
void copy_template(const ASP__SSH__SetRemotePort_template& other_value);

public:
ASP__SSH__SetRemotePort_template();
ASP__SSH__SetRemotePort_template(template_sel other_value);
ASP__SSH__SetRemotePort_template(const ASP__SSH__SetRemotePort& other_value);
ASP__SSH__SetRemotePort_template(const OPTIONAL<ASP__SSH__SetRemotePort>& other_value);
ASP__SSH__SetRemotePort_template(const ASP__SSH__SetRemotePort_template& other_value);
~ASP__SSH__SetRemotePort_template();
ASP__SSH__SetRemotePort_template& operator=(template_sel other_value);
ASP__SSH__SetRemotePort_template& operator=(const ASP__SSH__SetRemotePort& other_value);
ASP__SSH__SetRemotePort_template& operator=(const OPTIONAL<ASP__SSH__SetRemotePort>& other_value);
ASP__SSH__SetRemotePort_template& operator=(const ASP__SSH__SetRemotePort_template& other_value);
boolean match(const ASP__SSH__SetRemotePort& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__SetRemotePort valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__SetRemotePort_template& list_item(unsigned int list_index) const;
CHARSTRING_template& remoteport();
const CHARSTRING_template& remoteport() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__SetRemotePort& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class ASP__SSH__SetAdditionalParameters {
  CHARSTRING field_additionalparameters;
public:
  ASP__SSH__SetAdditionalParameters();
  ASP__SSH__SetAdditionalParameters(const CHARSTRING& par_additionalparameters);
  ASP__SSH__SetAdditionalParameters(const ASP__SSH__SetAdditionalParameters& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  ASP__SSH__SetAdditionalParameters& operator=(const ASP__SSH__SetAdditionalParameters& other_value);
  boolean operator==(const ASP__SSH__SetAdditionalParameters& other_value) const;
  inline boolean operator!=(const ASP__SSH__SetAdditionalParameters& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& additionalparameters()
    {return field_additionalparameters;}
  inline const CHARSTRING& additionalparameters() const
    {return field_additionalparameters;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class ASP__SSH__SetAdditionalParameters_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
ASP__SSH__SetAdditionalParameters_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const ASP__SSH__SetAdditionalParameters& other_value);
void copy_template(const ASP__SSH__SetAdditionalParameters_template& other_value);

public:
ASP__SSH__SetAdditionalParameters_template();
ASP__SSH__SetAdditionalParameters_template(template_sel other_value);
ASP__SSH__SetAdditionalParameters_template(const ASP__SSH__SetAdditionalParameters& other_value);
ASP__SSH__SetAdditionalParameters_template(const OPTIONAL<ASP__SSH__SetAdditionalParameters>& other_value);
ASP__SSH__SetAdditionalParameters_template(const ASP__SSH__SetAdditionalParameters_template& other_value);
~ASP__SSH__SetAdditionalParameters_template();
ASP__SSH__SetAdditionalParameters_template& operator=(template_sel other_value);
ASP__SSH__SetAdditionalParameters_template& operator=(const ASP__SSH__SetAdditionalParameters& other_value);
ASP__SSH__SetAdditionalParameters_template& operator=(const OPTIONAL<ASP__SSH__SetAdditionalParameters>& other_value);
ASP__SSH__SetAdditionalParameters_template& operator=(const ASP__SSH__SetAdditionalParameters_template& other_value);
boolean match(const ASP__SSH__SetAdditionalParameters& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
ASP__SSH__SetAdditionalParameters valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
ASP__SSH__SetAdditionalParameters_template& list_item(unsigned int list_index) const;
CHARSTRING_template& additionalparameters();
const CHARSTRING_template& additionalparameters() const;
int size_of() const;
void log() const;
void log_match(const ASP__SSH__SetAdditionalParameters& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const ASP__SSH__Close& other_value);
inline boolean operator!=(null_type null_value, const ASP__SSH__Close& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const ASP__SSH__PseudoPrompt& other_value);
inline boolean operator!=(null_type null_value, const ASP__SSH__PseudoPrompt& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const ASP__SSH__ClearPrompt& other_value);
inline boolean operator!=(null_type null_value, const ASP__SSH__ClearPrompt& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const ASP__SSH__Connect& other_value);
inline boolean operator!=(null_type null_value, const ASP__SSH__Connect& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const XERdescriptor_t ReadMode_xer_;
extern const TTCN_JSONdescriptor_t ReadMode_json_;
extern const TTCN_Typedescriptor_t ReadMode_descr_;
extern const XERdescriptor_t ASP__SSH_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH_json_;
extern const TTCN_Typedescriptor_t ASP__SSH_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__Close_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__PseudoPrompt_descr_;
extern const XERdescriptor_t ASP__SSH__Status_status__code_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__Status_status__code_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__Status_status__code_descr_;
extern const XERdescriptor_t ASP__SSH__Status_status__message_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__Status_status__message_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__Status_status__message_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__Status_descr_;
extern const XERdescriptor_t ASP__SSH__SetPrompt_prompt__name_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetPrompt_prompt__name_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetPrompt_prompt__name_descr_;
extern const XERdescriptor_t ASP__SSH__SetPrompt_prompt__value_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetPrompt_prompt__value_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetPrompt_prompt__value_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetPrompt_descr_;
extern const XERdescriptor_t ASP__SSH__SetRegexPrompt_prompt__name_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetRegexPrompt_prompt__name_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetRegexPrompt_prompt__name_descr_;
extern const XERdescriptor_t ASP__SSH__SetRegexPrompt_prompt__value_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetRegexPrompt_prompt__value_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetRegexPrompt_prompt__value_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetRegexPrompt_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__ClearPrompt_descr_;
extern const XERdescriptor_t ASP__SSH__SetMode_readmode_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetMode_readmode_json_;
extern const TTCN_OERdescriptor_t ASP__SSH__SetMode_readmode_oer_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetMode_readmode_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetMode_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__Connect_descr_;
extern const XERdescriptor_t ASP__SSH__SetUserID_usrid_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetUserID_usrid_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetUserID_usrid_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetUserID_descr_;
extern const XERdescriptor_t ASP__SSH__SetRemoteHost_remotehost_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetRemoteHost_remotehost_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetRemoteHost_remotehost_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetRemoteHost_descr_;
extern const XERdescriptor_t ASP__SSH__SetRemotePort_remoteport_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetRemotePort_remoteport_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetRemotePort_remoteport_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetRemotePort_descr_;
extern const XERdescriptor_t ASP__SSH__SetAdditionalParameters_additionalparameters_xer_;
extern const TTCN_JSONdescriptor_t ASP__SSH__SetAdditionalParameters_additionalparameters_json_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetAdditionalParameters_additionalparameters_descr_;
extern const TTCN_Typedescriptor_t ASP__SSH__SetAdditionalParameters_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
