// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4A
// for tango (tango@tango-VirtualBox) on Mon Jul 23 18:40:46 2018

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "SSHCLIENTasp_functions.hh"

namespace SSHCLIENTasp__functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean set_module_param(Module_Param& param);
static void log_module_param();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean init_system_port(const char* component_type, const char* port_name);
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const CHARSTRING cs_2(0, NULL),
cs_35('\n'),
cs_19(' '),
cs_24(4, " cd "),
cs_18(7, " chmod "),
cs_25(4, " cp "),
cs_36(5, " exit"),
cs_16(19, " exit; exit; logout"),
cs_6(3, " j="),
cs_30(4, " ls "),
cs_28(4, " mv "),
cs_7(9, " pattern="),
cs_32(4, " rm "),
cs_34(5, " ssh "),
cs_8(9, " success="),
cs_17('*'),
cs_11(10, "*assword:*"),
cs_13(8, "*closed*"),
cs_27(8, "*denied*"),
cs_12(18, "*ermission denied*"),
cs_20(26, "*o such file or directory*"),
cs_9(19, "*onnection refused*"),
cs_10(21, "*onnection timed out*"),
cs_21(16, "*ot a directory*"),
cs_29(17, "*overriding mode*"),
cs_26(11, "*same file*"),
cs_15(2, "-C"),
cs_14(2, "22"),
cs_22(7, "DEBUG: "),
cs_23(26, "DEBUG: error by executing "),
cs_5(9, "DEBUG: i="),
cs_31(14, "f_sshLs: error"),
cs_33(14, "f_sshRm: error"),
cs_0(7, "prompt1"),
cs_1(13, "regex_prompt1"),
cs_3(11, "sent cmd = "),
cs_4(13, "sshRespStr = ");
static const unsigned char module_checksum[] = { 0x75, 0xb9, 0xf1, 0x1c, 0x8b, 0x4c, 0xdb, 0x4e, 0x7b, 0x7f, 0x95, 0x88, 0xc3, 0xbe, 0xdf, 0xdd };

/* Class definitions for internal use */

class as__conversation__error_Default : public Default_Base {
public:
as__conversation__error_Default();
alt_status call_altstep();
};

class as__T__SSHresp__timeout_Default : public Default_Base {
public:
as__T__SSHresp__timeout_Default();
alt_status call_altstep();
};

class as__prompt_Default : public Default_Base {
public:
as__prompt_Default();
alt_status call_altstep();
};

class as__status_Default : public Default_Base {
public:
as__status_Default();
alt_status call_altstep();
};


/* Global variable definitions */

static FLOAT modulepar_sshDefaultRespTimeout;
const FLOAT& sshDefaultRespTimeout = modulepar_sshDefaultRespTimeout;
static FLOAT modulepar_login__waittime;
const FLOAT& login__waittime = modulepar_login__waittime;
static SSHCLIENTasp__Types::ASP__SSH__ClearPrompt_template template_t__ASP__SSH__ClearPrompt;
const SSHCLIENTasp__Types::ASP__SSH__ClearPrompt_template& t__ASP__SSH__ClearPrompt = template_t__ASP__SSH__ClearPrompt;
static SSHCLIENTasp__Types::ASP__SSH__Connect_template template_t__ASP__SSH__Connect;
const SSHCLIENTasp__Types::ASP__SSH__Connect_template& t__ASP__SSH__Connect = template_t__ASP__SSH__Connect;
static SSHCLIENTasp__Types::ASP__SSH__Close_template template_t__ASP__SSH__Close;
const SSHCLIENTasp__Types::ASP__SSH__Close_template& t__ASP__SSH__Close = template_t__ASP__SSH__Close;
static SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt_template template_t__ASP__SSH__PseudoPrompt;
const SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt_template& t__ASP__SSH__PseudoPrompt = template_t__ASP__SSH__PseudoPrompt;
static SSHCLIENTasp__Types::ASP__SSH__Status_template template_t__ASP__SSH__Status;
const SSHCLIENTasp__Types::ASP__SSH__Status_template& t__ASP__SSH__Status = template_t__ASP__SSH__Status;
static SSHCLIENTasp__Types::ASP__SSH__Status_template template_t__ASP__SSH__Status__OK;
const SSHCLIENTasp__Types::ASP__SSH__Status_template& t__ASP__SSH__Status__OK = template_t__ASP__SSH__Status__OK;
static CHARSTRING_template template_t__ASP__SSH;
const CHARSTRING_template& t__ASP__SSH = template_t__ASP__SSH;
const XERdescriptor_t       cliPattern2match_pat_xer_ = { {"pat>\n", "pat>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t cliPattern2match_pat_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t cliPattern2match_pat_descr_ = { "@SSHCLIENTasp_functions.cliPattern2match.pat", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &cliPattern2match_pat_xer_, &cliPattern2match_pat_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       cliPattern2match_res_xer_ = { {"res>\n", "res>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t cliPattern2match_res_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const int cliPattern2match_res_oer_ext_arr_[0] = {};
const int cliPattern2match_res_oer_p_[0] = {};
const TTCN_OERdescriptor_t cliPattern2match_res_oer_ = { -1, FALSE, -1, FALSE, 0, 0, cliPattern2match_res_oer_ext_arr_, 0, cliPattern2match_res_oer_p_};
const TTCN_Typedescriptor_t cliPattern2match_res_descr_ = { "@SSHCLIENTasp_functions.cliPattern2match.res", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &cliPattern2match_res_xer_, &cliPattern2match_res_json_, &cliPattern2match_res_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for cliPattern2match
const TTCN_Typedescriptor_t cliPattern2match_descr_ = { "@SSHCLIENTasp_functions.cliPattern2match", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for cliPatternlist
const TTCN_Typedescriptor_t cliPatternlist_descr_ = { "@SSHCLIENTasp_functions.cliPatternlist", NULL, NULL, NULL, NULL, NULL, NULL, &cliPattern2match_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       CommandStep_cmd_xer_ = { {"cmd>\n", "cmd>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t CommandStep_cmd_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t CommandStep_cmd_descr_ = { "@SSHCLIENTasp_functions.CommandStep.cmd", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &CommandStep_cmd_xer_, &CommandStep_cmd_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for CommandStep
const TTCN_Typedescriptor_t CommandStep_descr_ = { "@SSHCLIENTasp_functions.CommandStep", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for CommandList
const TTCN_Typedescriptor_t CommandList_descr_ = { "@SSHCLIENTasp_functions.CommandList", NULL, NULL, NULL, NULL, NULL, NULL, &CommandStep_descr_, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& SSH__CT_descr_ = COMPONENT_descr_;
SSHCLIENTasp__PortType::SSHCLIENTasp__PT SSH__CT_component_SSH__PCO("SSH_PCO");
TIMER SSH__CT_component_T__sshResp("T_sshResp");
CHARSTRING SSH__CT_component_sshRespStr;
// No XER for SSH__CT__list
const TTCN_Typedescriptor_t SSH__CT__list_descr_ = { "@SSHCLIENTasp_functions.SSH_CT_list", NULL, NULL, NULL, NULL, NULL, NULL, &COMPONENT_descr_, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& MTC__CT_descr_ = COMPONENT_descr_;
SSH__CT__list MTC__CT_component_cliClient;
TTCN_Module module_object("SSHCLIENTasp_functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, set_module_param, NULL, log_module_param, init_comp_type, init_system_port, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

cliPattern2match::cliPattern2match()
{
}

cliPattern2match::cliPattern2match(const CHARSTRING& par_pat,
    const BOOLEAN& par_res)
  :   field_pat(par_pat),
  field_res(par_res)
{
}

cliPattern2match::cliPattern2match(const cliPattern2match& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_functions.cliPattern2match.");
if (other_value.pat().is_bound()) field_pat = other_value.pat();
else field_pat.clean_up();
if (other_value.res().is_bound()) field_res = other_value.res();
else field_res.clean_up();
}

void cliPattern2match::clean_up()
{
field_pat.clean_up();
field_res.clean_up();
}

cliPattern2match& cliPattern2match::operator=(const cliPattern2match& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_functions.cliPattern2match.");
  if (other_value.pat().is_bound()) field_pat = other_value.pat();
  else field_pat.clean_up();
  if (other_value.res().is_bound()) field_res = other_value.res();
  else field_res.clean_up();
}
return *this;
}

boolean cliPattern2match::operator==(const cliPattern2match& other_value) const
{
return field_pat==other_value.field_pat
  && field_res==other_value.field_res;
}

boolean cliPattern2match::is_bound() const
{
if(field_pat.is_bound()) return TRUE;
if(field_res.is_bound()) return TRUE;
return FALSE;
}
boolean cliPattern2match::is_value() const
{
if(!field_pat.is_value()) return FALSE;
if(!field_res.is_value()) return FALSE;
return TRUE;
}
void cliPattern2match::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ pat := ");
field_pat.log();
TTCN_Logger::log_event_str(", res := ");
field_res.log();
TTCN_Logger::log_event_str(" }");
}

void cliPattern2match::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_functions.cliPattern2match has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) pat().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) res().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "pat")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          pat().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "res")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          res().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_functions.cliPattern2match: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_functions.cliPattern2match");
  }
}

void cliPattern2match::set_implicit_omit()
{
if (pat().is_bound()) pat().set_implicit_omit();
if (res().is_bound()) res().set_implicit_omit();
}

void cliPattern2match::encode_text(Text_Buf& text_buf) const
{
field_pat.encode_text(text_buf);
field_res.encode_text(text_buf);
}

void cliPattern2match::decode_text(Text_Buf& text_buf)
{
field_pat.decode_text(text_buf);
field_res.decode_text(text_buf);
}

struct cliPattern2match_template::single_value_struct {
CHARSTRING_template field_pat;
BOOLEAN_template field_res;
};

void cliPattern2match_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_pat = ANY_VALUE;
single_value->field_res = ANY_VALUE;
}
}
}

void cliPattern2match_template::copy_value(const cliPattern2match& other_value)
{
single_value = new single_value_struct;
if (other_value.pat().is_bound()) {
  single_value->field_pat = other_value.pat();
} else {
  single_value->field_pat.clean_up();
}
if (other_value.res().is_bound()) {
  single_value->field_res = other_value.res();
} else {
  single_value->field_res.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void cliPattern2match_template::copy_template(const cliPattern2match_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.pat().get_selection()) {
single_value->field_pat = other_value.pat();
} else {
single_value->field_pat.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.res().get_selection()) {
single_value->field_res = other_value.res();
} else {
single_value->field_res.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new cliPattern2match_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPattern2match.");
break;
}
set_selection(other_value);
}

cliPattern2match_template::cliPattern2match_template()
{
}

cliPattern2match_template::cliPattern2match_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

cliPattern2match_template::cliPattern2match_template(const cliPattern2match& other_value)
{
copy_value(other_value);
}

cliPattern2match_template::cliPattern2match_template(const OPTIONAL<cliPattern2match>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const cliPattern2match&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_functions.cliPattern2match from an unbound optional field.");
}
}

cliPattern2match_template::cliPattern2match_template(const cliPattern2match_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

cliPattern2match_template::~cliPattern2match_template()
{
clean_up();
}

cliPattern2match_template& cliPattern2match_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

cliPattern2match_template& cliPattern2match_template::operator=(const cliPattern2match& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

cliPattern2match_template& cliPattern2match_template::operator=(const OPTIONAL<cliPattern2match>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const cliPattern2match&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_functions.cliPattern2match.");
}
return *this;
}

cliPattern2match_template& cliPattern2match_template::operator=(const cliPattern2match_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean cliPattern2match_template::match(const cliPattern2match& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.pat().is_bound()) return FALSE;
if(!single_value->field_pat.match(other_value.pat(), legacy))return FALSE;
if(!other_value.res().is_bound()) return FALSE;
if(!single_value->field_res.match(other_value.res(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPattern2match.");
}
return FALSE;
}

boolean cliPattern2match_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_pat.is_bound()) return TRUE;
if (single_value->field_res.is_bound()) return TRUE;
return FALSE;
}

boolean cliPattern2match_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_pat.is_value()) return FALSE;
if (!single_value->field_res.is_value()) return FALSE;
return TRUE;
}

void cliPattern2match_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

cliPattern2match cliPattern2match_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_functions.cliPattern2match.");
cliPattern2match ret_val;
if (single_value->field_pat.is_bound()) {
ret_val.pat() = single_value->field_pat.valueof();
}
if (single_value->field_res.is_bound()) {
ret_val.res() = single_value->field_res.valueof();
}
return ret_val;
}

void cliPattern2match_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_functions.cliPattern2match.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new cliPattern2match_template[list_length];
}

cliPattern2match_template& cliPattern2match_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_functions.cliPattern2match.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_functions.cliPattern2match.");
return value_list.list_value[list_index];
}

CHARSTRING_template& cliPattern2match_template::pat()
{
set_specific();
return single_value->field_pat;
}

const CHARSTRING_template& cliPattern2match_template::pat() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field pat of a non-specific template of type @SSHCLIENTasp_functions.cliPattern2match.");
return single_value->field_pat;
}

BOOLEAN_template& cliPattern2match_template::res()
{
set_specific();
return single_value->field_res;
}

const BOOLEAN_template& cliPattern2match_template::res() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field res of a non-specific template of type @SSHCLIENTasp_functions.cliPattern2match.");
return single_value->field_res;
}

int cliPattern2match_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.cliPattern2match which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.cliPattern2match containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.cliPattern2match containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.cliPattern2match containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.cliPattern2match containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.cliPattern2match containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPattern2match.");
  }
  return 0;
}

void cliPattern2match_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ pat := ");
single_value->field_pat.log();
TTCN_Logger::log_event_str(", res := ");
single_value->field_res.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void cliPattern2match_template::log_match(const cliPattern2match& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_pat.match(match_value.pat(), legacy)){
TTCN_Logger::log_logmatch_info(".pat");
single_value->field_pat.log_match(match_value.pat(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_res.match(match_value.res(), legacy)){
TTCN_Logger::log_logmatch_info(".res");
single_value->field_res.log_match(match_value.res(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ pat := ");
single_value->field_pat.log_match(match_value.pat(), legacy);
TTCN_Logger::log_event_str(", res := ");
single_value->field_res.log_match(match_value.res(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void cliPattern2match_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_pat.encode_text(text_buf);
single_value->field_res.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPattern2match.");
}
}

void cliPattern2match_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_pat.decode_text(text_buf);
single_value->field_res.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new cliPattern2match_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_functions.cliPattern2match.");
}
}

void cliPattern2match_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    cliPattern2match_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_functions.cliPattern2match has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) pat().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) res().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "pat")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          pat().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "res")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          res().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_functions.cliPattern2match: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_functions.cliPattern2match");
  }
  is_ifpresent = param.get_ifpresent();
}

void cliPattern2match_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_pat.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_functions.cliPattern2match");
single_value->field_res.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_functions.cliPattern2match");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_functions.cliPattern2match");
}

boolean cliPattern2match_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean cliPattern2match_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


const cliPattern2match cliPatternlist::UNBOUND_ELEM;
cliPatternlist::cliPatternlist()
{
val_ptr = NULL;
}

cliPatternlist::cliPatternlist(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

cliPatternlist::cliPatternlist(const cliPatternlist& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

cliPatternlist::~cliPatternlist()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void cliPatternlist::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

cliPatternlist& cliPatternlist::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

cliPatternlist& cliPatternlist::operator=(const cliPatternlist& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean cliPatternlist::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
return val_ptr->n_elements == 0 ;
}

boolean cliPatternlist::operator==(const cliPatternlist& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

cliPattern2match& cliPatternlist::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @SSHCLIENTasp_functions.cliPatternlist using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (cliPattern2match**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new cliPattern2match(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new cliPattern2match;
}
return *val_ptr->value_elements[index_value];
}

cliPattern2match& cliPatternlist::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @SSHCLIENTasp_functions.cliPatternlist.");
return (*this)[(int)index_value];
}

const cliPattern2match& cliPatternlist::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
if (index_value < 0) TTCN_error("Accessing an element of type @SSHCLIENTasp_functions.cliPatternlist using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @SSHCLIENTasp_functions.cliPatternlist: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const cliPattern2match& cliPatternlist::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @SSHCLIENTasp_functions.cliPatternlist.");
return (*this)[(int)index_value];
}

cliPatternlist cliPatternlist::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

cliPatternlist cliPatternlist::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

cliPatternlist cliPatternlist::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

cliPatternlist cliPatternlist::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
cliPatternlist ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new cliPattern2match(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

cliPatternlist cliPatternlist::operator+(const cliPatternlist& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @SSHCLIENTasp_functions.cliPatternlist concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
cliPatternlist ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new cliPattern2match(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new cliPattern2match(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

cliPatternlist cliPatternlist::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@SSHCLIENTasp_functions.cliPatternlist","element");
cliPatternlist ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new cliPattern2match(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

cliPatternlist cliPatternlist::replace(int index, int len, const cliPatternlist& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
check_replace_arguments(val_ptr->n_elements, index, len, "@SSHCLIENTasp_functions.cliPatternlist","element");
cliPatternlist ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new cliPattern2match(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new cliPattern2match(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new cliPattern2match(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

cliPatternlist cliPatternlist::replace(int index, int len, const cliPatternlist_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void cliPatternlist::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @SSHCLIENTasp_functions.cliPatternlist.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (cliPattern2match**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new cliPattern2match(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (cliPattern2match**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @SSHCLIENTasp_functions.cliPatternlist: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (cliPattern2match**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean cliPatternlist::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int cliPatternlist::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
return val_ptr->n_elements;
}

int cliPatternlist::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void cliPatternlist::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void cliPatternlist::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@SSHCLIENTasp_functions.cliPatternlist");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@SSHCLIENTasp_functions.cliPatternlist");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void cliPatternlist::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void cliPatternlist::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void cliPatternlist::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @SSHCLIENTasp_functions.cliPatternlist.");
val_ptr->value_elements = (cliPattern2match**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new cliPattern2match;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void cliPatternlist_template::copy_value(const cliPatternlist& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @SSHCLIENTasp_functions.cliPatternlist with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (cliPattern2match_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new cliPattern2match_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new cliPattern2match_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void cliPatternlist_template::copy_template(const cliPatternlist_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (cliPattern2match_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new cliPattern2match_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new cliPattern2match_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new cliPatternlist_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPatternlist.");
break;
}
set_selection(other_value);
}

boolean cliPatternlist_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const cliPatternlist_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const cliPatternlist*)value_ptr)[value_index], legacy);
else return ((const cliPatternlist_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

cliPatternlist_template::cliPatternlist_template()
{
}

cliPatternlist_template::cliPatternlist_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

cliPatternlist_template::cliPatternlist_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

cliPatternlist_template::cliPatternlist_template(const cliPatternlist& other_value)
{
copy_value(other_value);
}

cliPatternlist_template::cliPatternlist_template(const OPTIONAL<cliPatternlist>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const cliPatternlist&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_functions.cliPatternlist from an unbound optional field.");
}
}

cliPatternlist_template::cliPatternlist_template(const cliPatternlist_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

cliPatternlist_template::~cliPatternlist_template()
{
clean_up();
}

void cliPatternlist_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

cliPatternlist_template& cliPatternlist_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

cliPatternlist_template& cliPatternlist_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

cliPatternlist_template& cliPatternlist_template::operator=(const cliPatternlist& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

cliPatternlist_template& cliPatternlist_template::operator=(const OPTIONAL<cliPatternlist>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const cliPatternlist&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_functions.cliPatternlist.");
}
return *this;
}

cliPatternlist_template& cliPatternlist_template::operator=(const cliPatternlist_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

cliPattern2match_template& cliPatternlist_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @SSHCLIENTasp_functions.cliPatternlist using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @SSHCLIENTasp_functions.cliPatternlist.");
    break;
}
return *single_value.value_elements[index_value];
}

cliPattern2match_template& cliPatternlist_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @SSHCLIENTasp_functions.cliPatternlist.");
return (*this)[(int)index_value];
}

const cliPattern2match_template& cliPatternlist_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @SSHCLIENTasp_functions.cliPatternlist using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @SSHCLIENTasp_functions.cliPatternlist.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @SSHCLIENTasp_functions.cliPatternlist: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const cliPattern2match_template& cliPatternlist_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @SSHCLIENTasp_functions.cliPatternlist.");
return (*this)[(int)index_value];
}

void cliPatternlist_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @SSHCLIENTasp_functions.cliPatternlist.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (cliPattern2match_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new cliPattern2match_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new cliPattern2match_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (cliPattern2match_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int cliPatternlist_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int cliPatternlist_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.cliPatternlist which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.cliPatternlist containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.cliPatternlist containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.cliPatternlist containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.cliPatternlist containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.cliPatternlist containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPatternlist.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @SSHCLIENTasp_functions.cliPatternlist");
}

boolean cliPatternlist_template::match(const cliPatternlist& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPatternlist.");
}
return FALSE;
}

boolean cliPatternlist_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

cliPatternlist cliPatternlist_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_functions.cliPatternlist.");
cliPatternlist ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

cliPatternlist cliPatternlist_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

cliPatternlist cliPatternlist_template::replace(int index, int len, const cliPatternlist_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

cliPatternlist cliPatternlist_template::replace(int index, int len, const cliPatternlist& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void cliPatternlist_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new cliPatternlist_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @SSHCLIENTasp_functions.cliPatternlist.");
}
set_selection(template_type);
}

cliPatternlist_template& cliPatternlist_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @SSHCLIENTasp_functions.cliPatternlist.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @SSHCLIENTasp_functions.cliPatternlist.");
return value_list.list_value[list_index];
}

void cliPatternlist_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void cliPatternlist_template::log_match(const cliPatternlist& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void cliPatternlist_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_functions.cliPatternlist.");
}
}

void cliPatternlist_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @SSHCLIENTasp_functions.cliPatternlist.");
single_value.value_elements = (cliPattern2match_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new cliPattern2match_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new cliPatternlist_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @SSHCLIENTasp_functions.cliPatternlist.");
}
}

boolean cliPatternlist_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean cliPatternlist_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void cliPatternlist_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    cliPatternlist_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@SSHCLIENTasp_functions.cliPatternlist");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void cliPatternlist_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_functions.cliPatternlist");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_functions.cliPatternlist");
}

boolean cliPatternlist_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}
CommandStep::CommandStep()
{
}

CommandStep::CommandStep(const CHARSTRING& par_cmd,
    const cliPatternlist& par_PatternList)
  :   field_cmd(par_cmd),
  field_PatternList(par_PatternList)
{
}

CommandStep::CommandStep(const CommandStep& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_functions.CommandStep.");
if (other_value.cmd().is_bound()) field_cmd = other_value.cmd();
else field_cmd.clean_up();
if (other_value.PatternList().is_bound()) field_PatternList = other_value.PatternList();
else field_PatternList.clean_up();
}

void CommandStep::clean_up()
{
field_cmd.clean_up();
field_PatternList.clean_up();
}

CommandStep& CommandStep::operator=(const CommandStep& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_functions.CommandStep.");
  if (other_value.cmd().is_bound()) field_cmd = other_value.cmd();
  else field_cmd.clean_up();
  if (other_value.PatternList().is_bound()) field_PatternList = other_value.PatternList();
  else field_PatternList.clean_up();
}
return *this;
}

boolean CommandStep::operator==(const CommandStep& other_value) const
{
return field_cmd==other_value.field_cmd
  && field_PatternList==other_value.field_PatternList;
}

boolean CommandStep::is_bound() const
{
if(field_cmd.is_bound()) return TRUE;
if(field_PatternList.is_bound()) return TRUE;
return FALSE;
}
boolean CommandStep::is_value() const
{
if(!field_cmd.is_value()) return FALSE;
if(!field_PatternList.is_value()) return FALSE;
return TRUE;
}
void CommandStep::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ cmd := ");
field_cmd.log();
TTCN_Logger::log_event_str(", PatternList := ");
field_PatternList.log();
TTCN_Logger::log_event_str(" }");
}

void CommandStep::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_functions.CommandStep has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cmd().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) PatternList().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "PatternList")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          PatternList().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_functions.CommandStep: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_functions.CommandStep");
  }
}

void CommandStep::set_implicit_omit()
{
if (cmd().is_bound()) cmd().set_implicit_omit();
if (PatternList().is_bound()) PatternList().set_implicit_omit();
}

void CommandStep::encode_text(Text_Buf& text_buf) const
{
field_cmd.encode_text(text_buf);
field_PatternList.encode_text(text_buf);
}

void CommandStep::decode_text(Text_Buf& text_buf)
{
field_cmd.decode_text(text_buf);
field_PatternList.decode_text(text_buf);
}

struct CommandStep_template::single_value_struct {
CHARSTRING_template field_cmd;
cliPatternlist_template field_PatternList;
};

void CommandStep_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_cmd = ANY_VALUE;
single_value->field_PatternList = ANY_VALUE;
}
}
}

void CommandStep_template::copy_value(const CommandStep& other_value)
{
single_value = new single_value_struct;
if (other_value.cmd().is_bound()) {
  single_value->field_cmd = other_value.cmd();
} else {
  single_value->field_cmd.clean_up();
}
if (other_value.PatternList().is_bound()) {
  single_value->field_PatternList = other_value.PatternList();
} else {
  single_value->field_PatternList.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void CommandStep_template::copy_template(const CommandStep_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.cmd().get_selection()) {
single_value->field_cmd = other_value.cmd();
} else {
single_value->field_cmd.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.PatternList().get_selection()) {
single_value->field_PatternList = other_value.PatternList();
} else {
single_value->field_PatternList.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new CommandStep_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandStep.");
break;
}
set_selection(other_value);
}

CommandStep_template::CommandStep_template()
{
}

CommandStep_template::CommandStep_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

CommandStep_template::CommandStep_template(const CommandStep& other_value)
{
copy_value(other_value);
}

CommandStep_template::CommandStep_template(const OPTIONAL<CommandStep>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const CommandStep&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_functions.CommandStep from an unbound optional field.");
}
}

CommandStep_template::CommandStep_template(const CommandStep_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

CommandStep_template::~CommandStep_template()
{
clean_up();
}

CommandStep_template& CommandStep_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

CommandStep_template& CommandStep_template::operator=(const CommandStep& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

CommandStep_template& CommandStep_template::operator=(const OPTIONAL<CommandStep>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const CommandStep&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_functions.CommandStep.");
}
return *this;
}

CommandStep_template& CommandStep_template::operator=(const CommandStep_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean CommandStep_template::match(const CommandStep& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.cmd().is_bound()) return FALSE;
if(!single_value->field_cmd.match(other_value.cmd(), legacy))return FALSE;
if(!other_value.PatternList().is_bound()) return FALSE;
if(!single_value->field_PatternList.match(other_value.PatternList(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandStep.");
}
return FALSE;
}

boolean CommandStep_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_cmd.is_bound()) return TRUE;
if (single_value->field_PatternList.is_bound()) return TRUE;
return FALSE;
}

boolean CommandStep_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_cmd.is_value()) return FALSE;
if (!single_value->field_PatternList.is_value()) return FALSE;
return TRUE;
}

void CommandStep_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

CommandStep CommandStep_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_functions.CommandStep.");
CommandStep ret_val;
if (single_value->field_cmd.is_bound()) {
ret_val.cmd() = single_value->field_cmd.valueof();
}
if (single_value->field_PatternList.is_bound()) {
ret_val.PatternList() = single_value->field_PatternList.valueof();
}
return ret_val;
}

void CommandStep_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_functions.CommandStep.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new CommandStep_template[list_length];
}

CommandStep_template& CommandStep_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_functions.CommandStep.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_functions.CommandStep.");
return value_list.list_value[list_index];
}

CHARSTRING_template& CommandStep_template::cmd()
{
set_specific();
return single_value->field_cmd;
}

const CHARSTRING_template& CommandStep_template::cmd() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cmd of a non-specific template of type @SSHCLIENTasp_functions.CommandStep.");
return single_value->field_cmd;
}

cliPatternlist_template& CommandStep_template::PatternList()
{
set_specific();
return single_value->field_PatternList;
}

const cliPatternlist_template& CommandStep_template::PatternList() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field PatternList of a non-specific template of type @SSHCLIENTasp_functions.CommandStep.");
return single_value->field_PatternList;
}

int CommandStep_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.CommandStep which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.CommandStep containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.CommandStep containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.CommandStep containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.CommandStep containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_functions.CommandStep containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandStep.");
  }
  return 0;
}

void CommandStep_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ cmd := ");
single_value->field_cmd.log();
TTCN_Logger::log_event_str(", PatternList := ");
single_value->field_PatternList.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void CommandStep_template::log_match(const CommandStep& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_cmd.match(match_value.cmd(), legacy)){
TTCN_Logger::log_logmatch_info(".cmd");
single_value->field_cmd.log_match(match_value.cmd(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_PatternList.match(match_value.PatternList(), legacy)){
TTCN_Logger::log_logmatch_info(".PatternList");
single_value->field_PatternList.log_match(match_value.PatternList(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ cmd := ");
single_value->field_cmd.log_match(match_value.cmd(), legacy);
TTCN_Logger::log_event_str(", PatternList := ");
single_value->field_PatternList.log_match(match_value.PatternList(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void CommandStep_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_cmd.encode_text(text_buf);
single_value->field_PatternList.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandStep.");
}
}

void CommandStep_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_cmd.decode_text(text_buf);
single_value->field_PatternList.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new CommandStep_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_functions.CommandStep.");
}
}

void CommandStep_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    CommandStep_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_functions.CommandStep has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cmd().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) PatternList().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cmd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cmd().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "PatternList")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          PatternList().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_functions.CommandStep: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_functions.CommandStep");
  }
  is_ifpresent = param.get_ifpresent();
}

void CommandStep_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_cmd.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_functions.CommandStep");
single_value->field_PatternList.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_functions.CommandStep");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_functions.CommandStep");
}

boolean CommandStep_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean CommandStep_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


const CommandStep CommandList::UNBOUND_ELEM;
CommandList::CommandList()
{
val_ptr = NULL;
}

CommandList::CommandList(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

CommandList::CommandList(const CommandList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_functions.CommandList.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

CommandList::~CommandList()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void CommandList::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

CommandList& CommandList::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

CommandList& CommandList::operator=(const CommandList& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @SSHCLIENTasp_functions.CommandList.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean CommandList::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @SSHCLIENTasp_functions.CommandList.");
return val_ptr->n_elements == 0 ;
}

boolean CommandList::operator==(const CommandList& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @SSHCLIENTasp_functions.CommandList.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @SSHCLIENTasp_functions.CommandList.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

CommandStep& CommandList::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @SSHCLIENTasp_functions.CommandList using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (CommandStep**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new CommandStep(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new CommandStep;
}
return *val_ptr->value_elements[index_value];
}

CommandStep& CommandList::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @SSHCLIENTasp_functions.CommandList.");
return (*this)[(int)index_value];
}

const CommandStep& CommandList::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @SSHCLIENTasp_functions.CommandList.");
if (index_value < 0) TTCN_error("Accessing an element of type @SSHCLIENTasp_functions.CommandList using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @SSHCLIENTasp_functions.CommandList: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const CommandStep& CommandList::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @SSHCLIENTasp_functions.CommandList.");
return (*this)[(int)index_value];
}

CommandList CommandList::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

CommandList CommandList::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

CommandList CommandList::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

CommandList CommandList::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @SSHCLIENTasp_functions.CommandList.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
CommandList ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new CommandStep(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

CommandList CommandList::operator+(const CommandList& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @SSHCLIENTasp_functions.CommandList concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
CommandList ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new CommandStep(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new CommandStep(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

CommandList CommandList::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @SSHCLIENTasp_functions.CommandList.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@SSHCLIENTasp_functions.CommandList","element");
CommandList ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new CommandStep(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

CommandList CommandList::replace(int index, int len, const CommandList& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @SSHCLIENTasp_functions.CommandList.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @SSHCLIENTasp_functions.CommandList.");
check_replace_arguments(val_ptr->n_elements, index, len, "@SSHCLIENTasp_functions.CommandList","element");
CommandList ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new CommandStep(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new CommandStep(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new CommandStep(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

CommandList CommandList::replace(int index, int len, const CommandList_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void CommandList::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @SSHCLIENTasp_functions.CommandList.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (CommandStep**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new CommandStep(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (CommandStep**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @SSHCLIENTasp_functions.CommandList: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (CommandStep**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean CommandList::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int CommandList::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @SSHCLIENTasp_functions.CommandList.");
return val_ptr->n_elements;
}

int CommandList::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @SSHCLIENTasp_functions.CommandList.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void CommandList::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void CommandList::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@SSHCLIENTasp_functions.CommandList");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@SSHCLIENTasp_functions.CommandList");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void CommandList::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void CommandList::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @SSHCLIENTasp_functions.CommandList.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void CommandList::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @SSHCLIENTasp_functions.CommandList.");
val_ptr->value_elements = (CommandStep**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new CommandStep;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void CommandList_template::copy_value(const CommandList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @SSHCLIENTasp_functions.CommandList with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (CommandStep_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new CommandStep_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new CommandStep_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void CommandList_template::copy_template(const CommandList_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (CommandStep_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new CommandStep_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new CommandStep_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new CommandList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandList.");
break;
}
set_selection(other_value);
}

boolean CommandList_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const CommandList_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const CommandList*)value_ptr)[value_index], legacy);
else return ((const CommandList_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

CommandList_template::CommandList_template()
{
}

CommandList_template::CommandList_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

CommandList_template::CommandList_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

CommandList_template::CommandList_template(const CommandList& other_value)
{
copy_value(other_value);
}

CommandList_template::CommandList_template(const OPTIONAL<CommandList>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const CommandList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_functions.CommandList from an unbound optional field.");
}
}

CommandList_template::CommandList_template(const CommandList_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

CommandList_template::~CommandList_template()
{
clean_up();
}

void CommandList_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

CommandList_template& CommandList_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

CommandList_template& CommandList_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

CommandList_template& CommandList_template::operator=(const CommandList& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

CommandList_template& CommandList_template::operator=(const OPTIONAL<CommandList>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const CommandList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_functions.CommandList.");
}
return *this;
}

CommandList_template& CommandList_template::operator=(const CommandList_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

CommandStep_template& CommandList_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @SSHCLIENTasp_functions.CommandList using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @SSHCLIENTasp_functions.CommandList.");
    break;
}
return *single_value.value_elements[index_value];
}

CommandStep_template& CommandList_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @SSHCLIENTasp_functions.CommandList.");
return (*this)[(int)index_value];
}

const CommandStep_template& CommandList_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @SSHCLIENTasp_functions.CommandList using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @SSHCLIENTasp_functions.CommandList.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @SSHCLIENTasp_functions.CommandList: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const CommandStep_template& CommandList_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @SSHCLIENTasp_functions.CommandList.");
return (*this)[(int)index_value];
}

void CommandList_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @SSHCLIENTasp_functions.CommandList.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (CommandStep_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new CommandStep_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new CommandStep_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (CommandStep_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int CommandList_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int CommandList_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.CommandList which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.CommandList containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.CommandList containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.CommandList containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.CommandList containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.CommandList containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandList.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @SSHCLIENTasp_functions.CommandList");
}

boolean CommandList_template::match(const CommandList& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandList.");
}
return FALSE;
}

boolean CommandList_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

CommandList CommandList_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_functions.CommandList.");
CommandList ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

CommandList CommandList_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

CommandList CommandList_template::replace(int index, int len, const CommandList_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

CommandList CommandList_template::replace(int index, int len, const CommandList& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void CommandList_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new CommandList_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @SSHCLIENTasp_functions.CommandList.");
}
set_selection(template_type);
}

CommandList_template& CommandList_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @SSHCLIENTasp_functions.CommandList.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @SSHCLIENTasp_functions.CommandList.");
return value_list.list_value[list_index];
}

void CommandList_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void CommandList_template::log_match(const CommandList& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void CommandList_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_functions.CommandList.");
}
}

void CommandList_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @SSHCLIENTasp_functions.CommandList.");
single_value.value_elements = (CommandStep_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new CommandStep_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new CommandList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @SSHCLIENTasp_functions.CommandList.");
}
}

boolean CommandList_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean CommandList_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void CommandList_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    CommandList_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@SSHCLIENTasp_functions.CommandList");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void CommandList_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_functions.CommandList");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_functions.CommandList");
}

boolean CommandList_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}

const COMPONENT SSH__CT__list::UNBOUND_ELEM;
SSH__CT__list::SSH__CT__list()
{
val_ptr = NULL;
}

SSH__CT__list::SSH__CT__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

SSH__CT__list::SSH__CT__list(const SSH__CT__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

SSH__CT__list::~SSH__CT__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void SSH__CT__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

SSH__CT__list& SSH__CT__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

SSH__CT__list& SSH__CT__list::operator=(const SSH__CT__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean SSH__CT__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
return val_ptr->n_elements == 0 ;
}

boolean SSH__CT__list::operator==(const SSH__CT__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

COMPONENT& SSH__CT__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @SSHCLIENTasp_functions.SSH_CT_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (COMPONENT**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new COMPONENT(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new COMPONENT;
}
return *val_ptr->value_elements[index_value];
}

COMPONENT& SSH__CT__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @SSHCLIENTasp_functions.SSH_CT_list.");
return (*this)[(int)index_value];
}

const COMPONENT& SSH__CT__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @SSHCLIENTasp_functions.SSH_CT_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @SSHCLIENTasp_functions.SSH_CT_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const COMPONENT& SSH__CT__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @SSHCLIENTasp_functions.SSH_CT_list.");
return (*this)[(int)index_value];
}

SSH__CT__list SSH__CT__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

SSH__CT__list SSH__CT__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

SSH__CT__list SSH__CT__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

SSH__CT__list SSH__CT__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
SSH__CT__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new COMPONENT(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

SSH__CT__list SSH__CT__list::operator+(const SSH__CT__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @SSHCLIENTasp_functions.SSH_CT_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
SSH__CT__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new COMPONENT(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new COMPONENT(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

SSH__CT__list SSH__CT__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@SSHCLIENTasp_functions.SSH_CT_list","element");
SSH__CT__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new COMPONENT(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

SSH__CT__list SSH__CT__list::replace(int index, int len, const SSH__CT__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@SSHCLIENTasp_functions.SSH_CT_list","element");
SSH__CT__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new COMPONENT(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new COMPONENT(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new COMPONENT(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

SSH__CT__list SSH__CT__list::replace(int index, int len, const SSH__CT__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void SSH__CT__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (COMPONENT**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new COMPONENT(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (COMPONENT**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @SSHCLIENTasp_functions.SSH_CT_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (COMPONENT**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean SSH__CT__list::is_value() const
{
if (val_ptr == NULL) return FALSE;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int SSH__CT__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
return val_ptr->n_elements;
}

int SSH__CT__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void SSH__CT__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void SSH__CT__list::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
          if (!(*this)[i].is_bound()) {
            delete val_ptr->value_elements[i];
            val_ptr->value_elements[i] = NULL;
          }
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
        if (!(*this)[curr->get_id()->get_index()].is_bound()) {
          delete val_ptr->value_elements[curr->get_id()->get_index()];
          val_ptr->value_elements[curr->get_id()->get_index()] = NULL;
        }
      }
      break;
    default:
      param.type_error("record of value", "@SSHCLIENTasp_functions.SSH_CT_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@SSHCLIENTasp_functions.SSH_CT_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

void SSH__CT__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void SSH__CT__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void SSH__CT__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @SSHCLIENTasp_functions.SSH_CT_list.");
val_ptr->value_elements = (COMPONENT**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new COMPONENT;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void SSH__CT__list_template::copy_value(const SSH__CT__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @SSHCLIENTasp_functions.SSH_CT_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (COMPONENT_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new COMPONENT_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new COMPONENT_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void SSH__CT__list_template::copy_template(const SSH__CT__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (COMPONENT_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new COMPONENT_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new COMPONENT_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new SSH__CT__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_functions.SSH_CT_list.");
break;
}
set_selection(other_value);
}

boolean SSH__CT__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const SSH__CT__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const SSH__CT__list*)value_ptr)[value_index], legacy);
else return ((const SSH__CT__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

SSH__CT__list_template::SSH__CT__list_template()
{
}

SSH__CT__list_template::SSH__CT__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

SSH__CT__list_template::SSH__CT__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

SSH__CT__list_template::SSH__CT__list_template(const SSH__CT__list& other_value)
{
copy_value(other_value);
}

SSH__CT__list_template::SSH__CT__list_template(const OPTIONAL<SSH__CT__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const SSH__CT__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_functions.SSH_CT_list from an unbound optional field.");
}
}

SSH__CT__list_template::SSH__CT__list_template(const SSH__CT__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

SSH__CT__list_template::~SSH__CT__list_template()
{
clean_up();
}

void SSH__CT__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

SSH__CT__list_template& SSH__CT__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

SSH__CT__list_template& SSH__CT__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

SSH__CT__list_template& SSH__CT__list_template::operator=(const SSH__CT__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

SSH__CT__list_template& SSH__CT__list_template::operator=(const OPTIONAL<SSH__CT__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const SSH__CT__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_functions.SSH_CT_list.");
}
return *this;
}

SSH__CT__list_template& SSH__CT__list_template::operator=(const SSH__CT__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

COMPONENT_template& SSH__CT__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @SSHCLIENTasp_functions.SSH_CT_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @SSHCLIENTasp_functions.SSH_CT_list.");
    break;
}
return *single_value.value_elements[index_value];
}

COMPONENT_template& SSH__CT__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @SSHCLIENTasp_functions.SSH_CT_list.");
return (*this)[(int)index_value];
}

const COMPONENT_template& SSH__CT__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @SSHCLIENTasp_functions.SSH_CT_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @SSHCLIENTasp_functions.SSH_CT_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @SSHCLIENTasp_functions.SSH_CT_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const COMPONENT_template& SSH__CT__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @SSHCLIENTasp_functions.SSH_CT_list.");
return (*this)[(int)index_value];
}

void SSH__CT__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @SSHCLIENTasp_functions.SSH_CT_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (COMPONENT_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new COMPONENT_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new COMPONENT_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (COMPONENT_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int SSH__CT__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int SSH__CT__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.SSH_CT_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.SSH_CT_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.SSH_CT_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.SSH_CT_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.SSH_CT_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @SSHCLIENTasp_functions.SSH_CT_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_functions.SSH_CT_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @SSHCLIENTasp_functions.SSH_CT_list");
}

boolean SSH__CT__list_template::match(const SSH__CT__list& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @SSHCLIENTasp_functions.SSH_CT_list.");
}
return FALSE;
}

boolean SSH__CT__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return FALSE;
return TRUE;
}

SSH__CT__list SSH__CT__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_functions.SSH_CT_list.");
SSH__CT__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

SSH__CT__list SSH__CT__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

SSH__CT__list SSH__CT__list_template::replace(int index, int len, const SSH__CT__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

SSH__CT__list SSH__CT__list_template::replace(int index, int len, const SSH__CT__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void SSH__CT__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new SSH__CT__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @SSHCLIENTasp_functions.SSH_CT_list.");
}
set_selection(template_type);
}

SSH__CT__list_template& SSH__CT__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @SSHCLIENTasp_functions.SSH_CT_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @SSHCLIENTasp_functions.SSH_CT_list.");
return value_list.list_value[list_index];
}

void SSH__CT__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void SSH__CT__list_template::log_match(const SSH__CT__list& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void SSH__CT__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_functions.SSH_CT_list.");
}
}

void SSH__CT__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @SSHCLIENTasp_functions.SSH_CT_list.");
single_value.value_elements = (COMPONENT_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new COMPONENT_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new SSH__CT__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @SSHCLIENTasp_functions.SSH_CT_list.");
}
}

boolean SSH__CT__list_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean SSH__CT__list_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void SSH__CT__list_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    SSH__CT__list_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@SSHCLIENTasp_functions.SSH_CT_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void SSH__CT__list_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_functions.SSH_CT_list");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_functions.SSH_CT_list");
}

boolean SSH__CT__list_template::get_istemplate_kind(const char* type) const {
if (!strcmp(type, "AnyElement")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_VALUE) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "AnyElementsOrNone")) {
  if (template_selection != SPECIFIC_VALUE) {
    return FALSE;
  }
  for (int i = 0; i < single_value.n_elements; i++) {
    if (single_value.value_elements[i]->get_selection() == ANY_OR_OMIT) {
      return TRUE;
    }
  }
  return FALSE;
} else if (!strcmp(type, "permutation")) {
  return number_of_permutations;
} else if (!strcmp(type, "length")) {
  return length_restriction_type != NO_LENGTH_RESTRICTION;
} else {
  return Base_Template::get_istemplate_kind(type);
}
}
as__conversation__error_Default::as__conversation__error_Default()
 : Default_Base("as_conversation_error")
{
}

alt_status as__conversation__error_Default::call_altstep()
{
return as__conversation__error_instance();
}

as__T__SSHresp__timeout_Default::as__T__SSHresp__timeout_Default()
 : Default_Base("as_T_SSHresp_timeout")
{
}

alt_status as__T__SSHresp__timeout_Default::call_altstep()
{
return as__T__SSHresp__timeout_instance();
}

as__prompt_Default::as__prompt_Default()
 : Default_Base("as_prompt")
{
}

alt_status as__prompt_Default::call_altstep()
{
return as__prompt_instance();
}

as__status_Default::as__status_Default()
 : Default_Base("as_status")
{
}

alt_status as__status_Default::call_altstep()
{
return as__status_instance();
}


/* Bodies of functions, altsteps and testcases */

SSHCLIENTasp__Types::ASP__SSH__SetUserID_template t__ASP__SSH__SetUserID(const CHARSTRING& ui)
{
SSHCLIENTasp__Types::ASP__SSH__SetUserID_template ret_val;
ret_val.usrid() = ui;
return ret_val;
}

SSHCLIENTasp__Types::ASP__SSH__SetPrompt_template t__ASP__SSH__SetPrompt(const CHARSTRING& sp)
{
SSHCLIENTasp__Types::ASP__SSH__SetPrompt_template ret_val;
ret_val.prompt__name() = cs_0;
ret_val.prompt__value() = sp;
return ret_val;
}

SSHCLIENTasp__Types::ASP__SSH__SetRegexPrompt_template t__ASP__SSH__SetRegexPrompt(const CHARSTRING& sp)
{
SSHCLIENTasp__Types::ASP__SSH__SetRegexPrompt_template ret_val;
ret_val.prompt__name() = cs_1;
ret_val.prompt__value() = sp;
return ret_val;
}

SSHCLIENTasp__Types::ASP__SSH__SetRemoteHost_template t__ASP__SSH__SetRemoteHost(const CHARSTRING& rh)
{
SSHCLIENTasp__Types::ASP__SSH__SetRemoteHost_template ret_val;
ret_val.remotehost() = rh;
return ret_val;
}

SSHCLIENTasp__Types::ASP__SSH__SetRemotePort_template t__ASP__SSH__SetRemotePort(const CHARSTRING& rp)
{
SSHCLIENTasp__Types::ASP__SSH__SetRemotePort_template ret_val;
ret_val.remoteport() = rp;
return ret_val;
}

SSHCLIENTasp__Types::ASP__SSH__SetAdditionalParameters_template t__ASP__SSH__SetAdditionalParameters(const CHARSTRING& ap)
{
SSHCLIENTasp__Types::ASP__SSH__SetAdditionalParameters_template ret_val;
ret_val.additionalparameters() = ap;
return ret_val;
}

SSHCLIENTasp__Types::ASP__SSH__SetMode_template t__ASP__SSH__SetMode(const INTEGER& readmode)
{
SSHCLIENTasp__Types::ASP__SSH__SetMode_template ret_val;
ret_val.readmode() = readmode;
return ret_val;
}

boolean operator==(null_type, const cliPatternlist& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @SSHCLIENTasp_functions.cliPatternlist.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const CommandList& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @SSHCLIENTasp_functions.CommandList.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const SSH__CT__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @SSHCLIENTasp_functions.SSH_CT_list.");
return other_value.val_ptr->n_elements == 0;
}

alt_status as__conversation__error_instance()
{
alt_status ret_val = ALT_NO;
/* SSHCLIENTasp_functions.ttcn, line 90 */
switch (SSH__CT_component_SSH__PCO.receive(t__ASP__SSH__Close, NULL, any_compref, NULL, NULL)) {
case ALT_YES:
{
/* SSHCLIENTasp_functions.ttcn, line 92 */
TTCN_Logger::log_str(TTCN_USER, "as_conversation_error: ASP_SSH_Close received");
/* SSHCLIENTasp_functions.ttcn, line 93 */
SSH__CT_component_T__sshResp.stop();
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void as__conversation__error()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = as__conversation__error_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep as_conversation_error.");
else block_flag = TRUE;
}
}

Default_Base *activate_as__conversation__error()
{
return new as__conversation__error_Default();
}

alt_status as__T__SSHresp__timeout_instance()
{
alt_status ret_val = ALT_NO;
/* SSHCLIENTasp_functions.ttcn, line 99 */
switch (SSH__CT_component_T__sshResp.timeout(NULL)) {
case ALT_YES:
{
/* SSHCLIENTasp_functions.ttcn, line 101 */
TTCN_Logger::log_str(TTCN_USER, "as_T_SSHresp_timeout: command response timeout");
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void as__T__SSHresp__timeout()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = as__T__SSHresp__timeout_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep as_T_SSHresp_timeout.");
else block_flag = TRUE;
}
}

Default_Base *activate_as__T__SSHresp__timeout()
{
return new as__T__SSHresp__timeout_Default();
}

alt_status as__prompt_instance()
{
alt_status ret_val = ALT_NO;
/* SSHCLIENTasp_functions.ttcn, line 107 */
switch (SSH__CT_component_SSH__PCO.receive(t__ASP__SSH__PseudoPrompt, NULL, any_compref, NULL, NULL)) {
case ALT_YES:
{
/* SSHCLIENTasp_functions.ttcn, line 109 */
TTCN_Logger::log_str(TTCN_USER, "as_prompt: ASP_SSH_PseudoPrompt received");
/* SSHCLIENTasp_functions.ttcn, line 110 */
SSH__CT_component_T__sshResp.stop();
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void as__prompt()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = as__prompt_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep as_prompt.");
else block_flag = TRUE;
}
}

Default_Base *activate_as__prompt()
{
return new as__prompt_Default();
}

alt_status as__status_instance()
{
alt_status ret_val = ALT_NO;
/* SSHCLIENTasp_functions.ttcn, line 116 */
switch (SSH__CT_component_SSH__PCO.receive(t__ASP__SSH__Status__OK, NULL, any_compref, NULL, NULL)) {
case ALT_YES:
{
/* SSHCLIENTasp_functions.ttcn, line 118 */
TTCN_Logger::log_str(TTCN_USER, "as_status: ASP_SSH_Status OK received");
/* SSHCLIENTasp_functions.ttcn, line 119 */
SSH__CT_component_T__sshResp.stop();
/* SSHCLIENTasp_functions.ttcn, line 120 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
/* SSHCLIENTasp_functions.ttcn, line 122 */
switch (SSH__CT_component_SSH__PCO.receive(t__ASP__SSH__Status, NULL, any_compref, NULL, NULL)) {
case ALT_YES:
{
/* SSHCLIENTasp_functions.ttcn, line 124 */
TTCN_Logger::log_str(TTCN_USER, "as_status: ASP_SSH_Status received");
/* SSHCLIENTasp_functions.ttcn, line 125 */
SSH__CT_component_T__sshResp.stop();
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void as__status()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = as__status_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep as_status.");
else block_flag = TRUE;
}
}

Default_Base *activate_as__status()
{
return new as__status_Default();
}

BOOLEAN f__sshCLIconversation(const CommandList& clist, const FLOAT& cliTimeOut)
{
/* SSHCLIENTasp_functions.ttcn, line 135 */
CHARSTRING respFragment(cs_2);
/* SSHCLIENTasp_functions.ttcn, line 136 */
CHARSTRING_template receivedMessage(cs_2);
/* SSHCLIENTasp_functions.ttcn, line 137 */
BOOLEAN success(FALSE);
/* SSHCLIENTasp_functions.ttcn, line 138 */
INTEGER i(0);
for ( ; ; ) {
/* SSHCLIENTasp_functions.ttcn, line 142 */
SSH__CT_component_sshRespStr = cs_2;
/* SSHCLIENTasp_functions.ttcn, line 143 */
if ((const_cast< const CommandList&>(clist)[i].cmd().lengthof() > 0)) {
/* SSHCLIENTasp_functions.ttcn, line 144 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_3 + const_cast< const CommandList&>(clist)[i].cmd()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 145 */
SSH__CT_component_SSH__PCO.send(const_cast< const CommandList&>(clist)[i].cmd());
}
/* SSHCLIENTasp_functions.ttcn, line 147 */
SSH__CT_component_T__sshResp.start(cliTimeOut);
/* SSHCLIENTasp_functions.ttcn, line 149 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_alt_flag_1 = ALT_MAYBE;
alt_status tmp_1_alt_flag_2 = ALT_MAYBE;
alt_status tmp_1_alt_flag_3 = ALT_MAYBE;
alt_status tmp_1_alt_flag_4 = ALT_MAYBE;
alt_status tmp_1_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
/* SSHCLIENTasp_functions.ttcn, line 151 */
tmp_1_alt_flag_0 = SSH__CT_component_SSH__PCO.receive(CHARSTRING_template(ANY_VALUE), &(respFragment), any_compref, NULL, NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
/* SSHCLIENTasp_functions.ttcn, line 153 */
SSH__CT_component_T__sshResp.stop();
/* SSHCLIENTasp_functions.ttcn, line 154 */
{
CHARSTRING tmp_2;
tmp_2 = (SSH__CT_component_sshRespStr + respFragment);
SSH__CT_component_sshRespStr = tmp_2;
}
/* SSHCLIENTasp_functions.ttcn, line 155 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_4 + SSH__CT_component_sshRespStr).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 156 */
SSH__CT_component_T__sshResp.start(cliTimeOut);
break;
}
}
if (tmp_1_alt_flag_1 == ALT_MAYBE) {
/* SSHCLIENTasp_functions.ttcn, line 159 */
tmp_1_alt_flag_1 = as__status_instance();
if (tmp_1_alt_flag_1 == ALT_REPEAT) goto tmp_1;
if (tmp_1_alt_flag_1 == ALT_BREAK) break;
if (tmp_1_alt_flag_1 == ALT_YES) break;
}
if (tmp_1_alt_flag_2 == ALT_MAYBE) {
/* SSHCLIENTasp_functions.ttcn, line 160 */
tmp_1_alt_flag_2 = as__prompt_instance();
if (tmp_1_alt_flag_2 == ALT_REPEAT) goto tmp_1;
if (tmp_1_alt_flag_2 == ALT_BREAK) break;
if (tmp_1_alt_flag_2 == ALT_YES) break;
}
if (tmp_1_alt_flag_3 == ALT_MAYBE) {
/* SSHCLIENTasp_functions.ttcn, line 161 */
tmp_1_alt_flag_3 = as__conversation__error_instance();
if (tmp_1_alt_flag_3 == ALT_REPEAT) goto tmp_1;
if (tmp_1_alt_flag_3 == ALT_BREAK) break;
if (tmp_1_alt_flag_3 == ALT_YES) break;
}
if (tmp_1_alt_flag_4 == ALT_MAYBE) {
/* SSHCLIENTasp_functions.ttcn, line 162 */
tmp_1_alt_flag_4 = as__T__SSHresp__timeout_instance();
if (tmp_1_alt_flag_4 == ALT_REPEAT) goto tmp_1;
if (tmp_1_alt_flag_4 == ALT_BREAK) break;
if (tmp_1_alt_flag_4 == ALT_YES) break;
}
if (tmp_1_default_flag == ALT_MAYBE) {
tmp_1_default_flag = TTCN_Default::try_altsteps();
if (tmp_1_default_flag == ALT_YES || tmp_1_default_flag == ALT_BREAK) break;
else if (tmp_1_default_flag == ALT_REPEAT) goto tmp_1;
}
/* SSHCLIENTasp_functions.ttcn, line 149 */
if (tmp_1_alt_flag_0 == ALT_NO && tmp_1_alt_flag_1 == ALT_NO && tmp_1_alt_flag_2 == ALT_NO && tmp_1_alt_flag_3 == ALT_NO && tmp_1_alt_flag_4 == ALT_NO && tmp_1_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file SSHCLIENTasp_functions.ttcn between lines 149 and 164.");
TTCN_Snapshot::take_new(TRUE);
}
}
/* SSHCLIENTasp_functions.ttcn, line 167 */
INTEGER j(0);
for ( ; ; ) {
/* SSHCLIENTasp_functions.ttcn, line 170 */
CHARSTRING tmp__pattern(const_cast< const CommandList&>(clist)[i].PatternList()[j].pat());
/* SSHCLIENTasp_functions.ttcn, line 171 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_4 + SSH__CT_component_sshRespStr).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 172 */
{
boolean tmp_4;
{
CHARSTRING_template tmp_3;
tmp_3 = CHARSTRING_template(STRING_PATTERN, (CHARSTRING)tmp__pattern, FALSE);
tmp_4 = (tmp_3.match(SSH__CT_component_sshRespStr) ^ const_cast< const CommandList&>(clist)[i].PatternList()[j].res());
}
if (tmp_4) {
/* SSHCLIENTasp_functions.ttcn, line 173 */
success = FALSE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 175 */
success = TRUE;
}
}
/* SSHCLIENTasp_functions.ttcn, line 177 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((((((cs_5 + int2str(i)) + cs_6) + int2str(j)) + cs_7) + tmp__pattern) + cs_8).log();
success.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 178 */
{
INTEGER tmp_7;
++j;
}
/* SSHCLIENTasp_functions.ttcn, line 179 */
if (!((j < const_cast< const CommandList&>(clist)[i].PatternList().size_of()) && success)) break;
}
/* SSHCLIENTasp_functions.ttcn, line 181 */
{
INTEGER tmp_8;
++i;
}
/* SSHCLIENTasp_functions.ttcn, line 183 */
if (!((i < clist.size_of()) && success)) break;
}
/* SSHCLIENTasp_functions.ttcn, line 185 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("DEBUG: success=");
success.log();
TTCN_Logger::log_event_str(", sshRespStr=");
SSH__CT_component_sshRespStr.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 187 */
return success;
}

void start_f__sshCLIconversation(const COMPONENT& component_reference, const CommandList& clist, const FLOAT& cliTimeOut)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshCLIconversation(");
clist.log();
TTCN_Logger::log_event_str(", ");
cliTimeOut.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshCLIconversation", text_buf);
clist.encode_text(text_buf);
cliTimeOut.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshLogin(const CHARSTRING& username, const CHARSTRING& passwd)
{
/* SSHCLIENTasp_functions.ttcn, line 194 */
CommandList cl(NULL_VALUE);
/* SSHCLIENTasp_functions.ttcn, line 196 */
if ((passwd == cs_2)) {
/* SSHCLIENTasp_functions.ttcn, line 197 */
cl.set_size(1);
{
CommandStep& tmp_10 = cl[0];
tmp_10.cmd() = cs_2;
{
cliPatternlist& tmp_11 = tmp_10.PatternList();
tmp_11.set_size(2);
{
cliPattern2match& tmp_12 = tmp_11[0];
tmp_12.pat() = cs_9;
tmp_12.res() = FALSE;
}
{
cliPattern2match& tmp_13 = tmp_11[1];
tmp_13.pat() = cs_10;
tmp_13.res() = FALSE;
}
}
}
}
else {
/* SSHCLIENTasp_functions.ttcn, line 207 */
cl.set_size(2);
{
CommandStep& tmp_15 = cl[0];
tmp_15.cmd() = cs_2;
{
cliPatternlist& tmp_16 = tmp_15.PatternList();
tmp_16.set_size(3);
{
cliPattern2match& tmp_17 = tmp_16[0];
tmp_17.pat() = cs_11;
tmp_17.res() = TRUE;
}
{
cliPattern2match& tmp_18 = tmp_16[1];
tmp_18.pat() = cs_9;
tmp_18.res() = FALSE;
}
{
cliPattern2match& tmp_19 = tmp_16[2];
tmp_19.pat() = cs_10;
tmp_19.res() = FALSE;
}
}
}
{
CommandStep& tmp_20 = cl[1];
tmp_20.cmd() = passwd;
{
cliPatternlist& tmp_21 = tmp_20.PatternList();
tmp_21.set_size(2);
{
cliPattern2match& tmp_22 = tmp_21[0];
tmp_22.pat() = cs_12;
tmp_22.res() = FALSE;
}
{
cliPattern2match& tmp_23 = tmp_21[1];
tmp_23.pat() = cs_13;
tmp_23.res() = FALSE;
}
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 228 */
TTCN_Runtime::map_port(SYSTEM_COMPREF, "SSH_PCO", self, SSH__CT_component_SSH__PCO.get_name());
/* SSHCLIENTasp_functions.ttcn, line 229 */
SSH__CT_component_SSH__PCO.send(t__ASP__SSH__SetUserID(username));
/* SSHCLIENTasp_functions.ttcn, line 235 */
SSH__CT_component_SSH__PCO.send(t__ASP__SSH__SetMode(0));
/* SSHCLIENTasp_functions.ttcn, line 237 */
SSH__CT_component_SSH__PCO.send(t__ASP__SSH__SetRemotePort(cs_14));
/* SSHCLIENTasp_functions.ttcn, line 239 */
SSH__CT_component_SSH__PCO.send(t__ASP__SSH__SetAdditionalParameters(cs_15));
/* SSHCLIENTasp_functions.ttcn, line 244 */
SSH__CT_component_SSH__PCO.send(t__ASP__SSH__Connect);
/* SSHCLIENTasp_functions.ttcn, line 246 */
if (f__sshCLIconversation(cl, login__waittime)) {
/* SSHCLIENTasp_functions.ttcn, line 247 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 248 */
return FALSE;
}
}

void start_f__sshLogin(const COMPONENT& component_reference, const CHARSTRING& username, const CHARSTRING& passwd)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshLogin(");
username.log();
TTCN_Logger::log_event_str(", ");
passwd.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshLogin", text_buf);
username.encode_text(text_buf);
passwd.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__sshLogout(const BOOLEAN& unmapSSH)
{
/* SSHCLIENTasp_functions.ttcn, line 254 */
CommandList cl;
cl.set_size(1);
{
CommandStep& tmp_24 = cl[0];
tmp_24.cmd() = cs_16;
{
cliPatternlist& tmp_25 = tmp_24.PatternList();
tmp_25.set_size(1);
{
cliPattern2match& tmp_26 = tmp_25[0];
tmp_26.pat() = cs_17;
tmp_26.res() = TRUE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 262 */
if (f__sshCLIconversation(cl, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 262 */
TTCN_Logger::log_str(TTCN_USER, "DEBUG: logged out gracefully.");
}
/* SSHCLIENTasp_functions.ttcn, line 263 */
if (unmapSSH) {
/* SSHCLIENTasp_functions.ttcn, line 264 */
TTCN_Logger::log_str(TTCN_USER, "DEBUG: closing SSH");
/* SSHCLIENTasp_functions.ttcn, line 265 */
TTCN_Runtime::unmap_port(SYSTEM_COMPREF, "SSH_PCO", self, SSH__CT_component_SSH__PCO.get_name());
}
}

void start_f__sshLogout(const COMPONENT& component_reference, const BOOLEAN& unmapSSH)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshLogout(");
unmapSSH.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshLogout", text_buf);
unmapSSH.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshChmod(const CHARSTRING& chmod__options, const CHARSTRING& files2chmod)
{
/* SSHCLIENTasp_functions.ttcn, line 273 */
CommandList cmdList;
cmdList.set_size(1);
{
CommandStep& tmp_27 = cmdList[0];
tmp_27.cmd() = (((cs_18 + chmod__options) + cs_19) + files2chmod);
{
cliPatternlist& tmp_28 = tmp_27.PatternList();
tmp_28.set_size(2);
{
cliPattern2match& tmp_29 = tmp_28[0];
tmp_29.pat() = cs_20;
tmp_29.res() = FALSE;
}
{
cliPattern2match& tmp_30 = tmp_28[1];
tmp_30.pat() = cs_21;
tmp_30.res() = FALSE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 282 */
SSH__CT_component_SSH__PCO.send(t__ASP__SSH__SetMode(0));
/* SSHCLIENTasp_functions.ttcn, line 283 */
if (f__sshCLIconversation(cmdList, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 284 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_22 + const_cast< const CommandList&>(cmdList)[0].cmd()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 285 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 287 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_23 + const_cast< const CommandList&>(cmdList)[0].cmd()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 288 */
return FALSE;
}
}

void start_f__sshChmod(const COMPONENT& component_reference, const CHARSTRING& chmod__options, const CHARSTRING& files2chmod)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshChmod(");
chmod__options.log();
TTCN_Logger::log_event_str(", ");
files2chmod.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshChmod", text_buf);
chmod__options.encode_text(text_buf);
files2chmod.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshCd(const CHARSTRING& dirname)
{
/* SSHCLIENTasp_functions.ttcn, line 296 */
CommandList cl;
cl.set_size(1);
{
CommandStep& tmp_31 = cl[0];
tmp_31.cmd() = (cs_24 + dirname);
{
cliPatternlist& tmp_32 = tmp_31.PatternList();
tmp_32.set_size(2);
{
cliPattern2match& tmp_33 = tmp_32[0];
tmp_33.pat() = cs_20;
tmp_33.res() = FALSE;
}
{
cliPattern2match& tmp_34 = tmp_32[1];
tmp_34.pat() = cs_21;
tmp_34.res() = FALSE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 305 */
if (f__sshCLIconversation(cl, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 306 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 307 */
return FALSE;
}
}

void start_f__sshCd(const COMPONENT& component_reference, const CHARSTRING& dirname)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshCd(");
dirname.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshCd", text_buf);
dirname.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshCp(const CHARSTRING& scrfile, const CHARSTRING& destfile)
{
/* SSHCLIENTasp_functions.ttcn, line 312 */
CommandList cl;
cl.set_size(1);
{
CommandStep& tmp_35 = cl[0];
tmp_35.cmd() = (((cs_25 + scrfile) + cs_19) + destfile);
{
cliPatternlist& tmp_36 = tmp_35.PatternList();
tmp_36.set_size(3);
{
cliPattern2match& tmp_37 = tmp_36[0];
tmp_37.pat() = cs_20;
tmp_37.res() = FALSE;
}
{
cliPattern2match& tmp_38 = tmp_36[1];
tmp_38.pat() = cs_26;
tmp_38.res() = FALSE;
}
{
cliPattern2match& tmp_39 = tmp_36[2];
tmp_39.pat() = cs_27;
tmp_39.res() = FALSE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 323 */
if (f__sshCLIconversation(cl, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 324 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 325 */
return FALSE;
}
}

void start_f__sshCp(const COMPONENT& component_reference, const CHARSTRING& scrfile, const CHARSTRING& destfile)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshCp(");
scrfile.log();
TTCN_Logger::log_event_str(", ");
destfile.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshCp", text_buf);
scrfile.encode_text(text_buf);
destfile.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshMv(const CHARSTRING& mv__src, const CHARSTRING& mv__dest)
{
/* SSHCLIENTasp_functions.ttcn, line 331 */
CommandList cmdList;
cmdList.set_size(1);
{
CommandStep& tmp_40 = cmdList[0];
tmp_40.cmd() = (((cs_28 + mv__src) + cs_19) + mv__dest);
{
cliPatternlist& tmp_41 = tmp_40.PatternList();
tmp_41.set_size(3);
{
cliPattern2match& tmp_42 = tmp_41[0];
tmp_42.pat() = cs_20;
tmp_42.res() = FALSE;
}
{
cliPattern2match& tmp_43 = tmp_41[1];
tmp_43.pat() = cs_21;
tmp_43.res() = FALSE;
}
{
cliPattern2match& tmp_44 = tmp_41[2];
tmp_44.pat() = cs_29;
tmp_44.res() = FALSE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 342 */
if (f__sshCLIconversation(cmdList, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 343 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_22 + const_cast< const CommandList&>(cmdList)[0].cmd()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 344 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 346 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_23 + const_cast< const CommandList&>(cmdList)[0].cmd()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 347 */
return FALSE;
}
}

void start_f__sshMv(const COMPONENT& component_reference, const CHARSTRING& mv__src, const CHARSTRING& mv__dest)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshMv(");
mv__src.log();
TTCN_Logger::log_event_str(", ");
mv__dest.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshMv", text_buf);
mv__src.encode_text(text_buf);
mv__dest.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshFileExists(const CHARSTRING& myfile)
{
/* SSHCLIENTasp_functions.ttcn, line 355 */
CommandList cmdList;
cmdList.set_size(1);
{
CommandStep& tmp_45 = cmdList[0];
tmp_45.cmd() = (cs_30 + myfile);
{
cliPatternlist& tmp_46 = tmp_45.PatternList();
tmp_46.set_size(2);
{
cliPattern2match& tmp_47 = tmp_46[0];
tmp_47.pat() = cs_20;
tmp_47.res() = FALSE;
}
{
cliPattern2match& tmp_48 = tmp_46[1];
tmp_48.pat() = ((cs_17 + myfile) + cs_17);
tmp_48.res() = TRUE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 365 */
if (f__sshCLIconversation(cmdList, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 366 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_22 + const_cast< const CommandList&>(cmdList)[0].cmd()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_functions.ttcn, line 367 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 369 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_23 + const_cast< const CommandList&>(cmdList)[0].cmd()).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
/* SSHCLIENTasp_functions.ttcn, line 371 */
return FALSE;
}

void start_f__sshFileExists(const COMPONENT& component_reference, const CHARSTRING& myfile)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshFileExists(");
myfile.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshFileExists", text_buf);
myfile.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

CHARSTRING f__sshLs(const CHARSTRING& lsparam)
{
/* SSHCLIENTasp_functions.ttcn, line 379 */
CommandList cl;
cl.set_size(1);
{
CommandStep& tmp_49 = cl[0];
tmp_49.cmd() = (cs_30 + lsparam);
{
cliPatternlist& tmp_50 = tmp_49.PatternList();
tmp_50.set_size(2);
{
cliPattern2match& tmp_51 = tmp_50[0];
tmp_51.pat() = cs_20;
tmp_51.res() = FALSE;
}
{
cliPattern2match& tmp_52 = tmp_50[1];
tmp_52.pat() = cs_21;
tmp_52.res() = FALSE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 388 */
if (f__sshCLIconversation(cl, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 389 */
return SSH__CT_component_sshRespStr;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 390 */
return cs_31;
}
}

void start_f__sshLs(const COMPONENT& component_reference, const CHARSTRING& lsparam)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshLs(");
lsparam.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshLs", text_buf);
lsparam.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

CHARSTRING f__sshRm(const CHARSTRING& rmparam)
{
/* SSHCLIENTasp_functions.ttcn, line 395 */
CommandList cl;
cl.set_size(1);
{
CommandStep& tmp_53 = cl[0];
tmp_53.cmd() = (cs_32 + rmparam);
{
cliPatternlist& tmp_54 = tmp_53.PatternList();
tmp_54.set_size(2);
{
cliPattern2match& tmp_55 = tmp_54[0];
tmp_55.pat() = cs_20;
tmp_55.res() = FALSE;
}
{
cliPattern2match& tmp_56 = tmp_54[1];
tmp_56.pat() = cs_21;
tmp_56.res() = FALSE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 404 */
if (f__sshCLIconversation(cl, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 405 */
return SSH__CT_component_sshRespStr;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 406 */
return cs_33;
}
}

void start_f__sshRm(const COMPONENT& component_reference, const CHARSTRING& rmparam)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshRm(");
rmparam.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshRm", text_buf);
rmparam.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshSsh(const CHARSTRING& ipaddr, const CHARSTRING& passwd)
{
/* SSHCLIENTasp_functions.ttcn, line 413 */
CommandList cl(NULL_VALUE);
/* SSHCLIENTasp_functions.ttcn, line 415 */
if ((passwd == cs_2)) {
/* SSHCLIENTasp_functions.ttcn, line 416 */
cl.set_size(2);
{
CommandStep& tmp_58 = cl[0];
tmp_58.cmd() = (cs_34 + ipaddr);
{
cliPatternlist& tmp_59 = tmp_58.PatternList();
tmp_59.set_size(2);
{
cliPattern2match& tmp_60 = tmp_59[0];
tmp_60.pat() = cs_9;
tmp_60.res() = FALSE;
}
{
cliPattern2match& tmp_61 = tmp_59[1];
tmp_61.pat() = cs_10;
tmp_61.res() = FALSE;
}
}
}
{
CommandStep& tmp_62 = cl[1];
tmp_62.cmd() = cs_35;
{
cliPatternlist& tmp_63 = tmp_62.PatternList();
tmp_63.set_size(2);
{
cliPattern2match& tmp_64 = tmp_63[0];
tmp_64.pat() = cs_17;
tmp_64.res() = TRUE;
}
{
cliPattern2match& tmp_65 = tmp_63[1];
tmp_65.pat() = cs_12;
tmp_65.res() = FALSE;
}
}
}
}
else {
/* SSHCLIENTasp_functions.ttcn, line 433 */
cl.set_size(3);
{
CommandStep& tmp_67 = cl[0];
tmp_67.cmd() = (cs_34 + ipaddr);
{
cliPatternlist& tmp_68 = tmp_67.PatternList();
tmp_68.set_size(3);
{
cliPattern2match& tmp_69 = tmp_68[0];
tmp_69.pat() = cs_11;
tmp_69.res() = TRUE;
}
{
cliPattern2match& tmp_70 = tmp_68[1];
tmp_70.pat() = cs_9;
tmp_70.res() = FALSE;
}
{
cliPattern2match& tmp_71 = tmp_68[2];
tmp_71.pat() = cs_10;
tmp_71.res() = FALSE;
}
}
}
{
CommandStep& tmp_72 = cl[1];
tmp_72.cmd() = passwd;
{
cliPatternlist& tmp_73 = tmp_72.PatternList();
tmp_73.set_size(2);
{
cliPattern2match& tmp_74 = tmp_73[0];
tmp_74.pat() = cs_12;
tmp_74.res() = FALSE;
}
{
cliPattern2match& tmp_75 = tmp_73[1];
tmp_75.pat() = cs_13;
tmp_75.res() = FALSE;
}
}
}
{
CommandStep& tmp_76 = cl[2];
tmp_76.cmd() = cs_35;
{
cliPatternlist& tmp_77 = tmp_76.PatternList();
tmp_77.set_size(2);
{
cliPattern2match& tmp_78 = tmp_77[0];
tmp_78.pat() = cs_17;
tmp_78.res() = TRUE;
}
{
cliPattern2match& tmp_79 = tmp_77[1];
tmp_79.pat() = cs_12;
tmp_79.res() = FALSE;
}
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 460 */
if (f__sshCLIconversation(cl, 1.5e1)) {
/* SSHCLIENTasp_functions.ttcn, line 461 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 462 */
return FALSE;
}
}

void start_f__sshSsh(const COMPONENT& component_reference, const CHARSTRING& ipaddr, const CHARSTRING& passwd)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshSsh(");
ipaddr.log();
TTCN_Logger::log_event_str(", ");
passwd.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshSsh", text_buf);
ipaddr.encode_text(text_buf);
passwd.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__sshExit()
{
/* SSHCLIENTasp_functions.ttcn, line 468 */
CommandList cl;
cl.set_size(1);
{
CommandStep& tmp_80 = cl[0];
tmp_80.cmd() = cs_36;
{
cliPatternlist& tmp_81 = tmp_80.PatternList();
tmp_81.set_size(2);
{
cliPattern2match& tmp_82 = tmp_81[0];
tmp_82.pat() = cs_20;
tmp_82.res() = FALSE;
}
{
cliPattern2match& tmp_83 = tmp_81[1];
tmp_83.pat() = cs_21;
tmp_83.res() = FALSE;
}
}
}
/* SSHCLIENTasp_functions.ttcn, line 477 */
if (f__sshCLIconversation(cl, sshDefaultRespTimeout)) {
/* SSHCLIENTasp_functions.ttcn, line 478 */
return TRUE;
}
else {
/* SSHCLIENTasp_functions.ttcn, line 479 */
return FALSE;
}
}

void start_f__sshExit(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshExit(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_functions", "f_sshExit", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}


/* Bodies of static functions */

static void pre_init_module()
{
SSHCLIENTasp__PortType::module_object.pre_init_module();
/* SSHCLIENTasp_functions.ttcn, line 34 */
modulepar_sshDefaultRespTimeout = 2.1;
module_object.add_altstep("as_conversation_error", (genericfunc_t)&as__conversation__error_instance, (genericfunc_t )&activate_as__conversation__error, (genericfunc_t )&as__conversation__error);
module_object.add_altstep("as_T_SSHresp_timeout", (genericfunc_t)&as__T__SSHresp__timeout_instance, (genericfunc_t )&activate_as__T__SSHresp__timeout, (genericfunc_t )&as__T__SSHresp__timeout);
module_object.add_altstep("as_prompt", (genericfunc_t)&as__prompt_instance, (genericfunc_t )&activate_as__prompt, (genericfunc_t )&as__prompt);
module_object.add_altstep("as_status", (genericfunc_t)&as__status_instance, (genericfunc_t )&activate_as__status, (genericfunc_t )&as__status);
module_object.add_function("f_sshCLIconversation", (genericfunc_t)&f__sshCLIconversation, (genericfunc_t)&start_f__sshCLIconversation);
module_object.add_function("f_sshLogin", (genericfunc_t)&f__sshLogin, (genericfunc_t)&start_f__sshLogin);
module_object.add_function("f_sshLogout", (genericfunc_t)&f__sshLogout, (genericfunc_t)&start_f__sshLogout);
module_object.add_function("f_sshChmod", (genericfunc_t)&f__sshChmod, (genericfunc_t)&start_f__sshChmod);
module_object.add_function("f_sshCd", (genericfunc_t)&f__sshCd, (genericfunc_t)&start_f__sshCd);
module_object.add_function("f_sshCp", (genericfunc_t)&f__sshCp, (genericfunc_t)&start_f__sshCp);
module_object.add_function("f_sshMv", (genericfunc_t)&f__sshMv, (genericfunc_t)&start_f__sshMv);
module_object.add_function("f_sshFileExists", (genericfunc_t)&f__sshFileExists, (genericfunc_t)&start_f__sshFileExists);
module_object.add_function("f_sshLs", (genericfunc_t)&f__sshLs, (genericfunc_t)&start_f__sshLs);
module_object.add_function("f_sshRm", (genericfunc_t)&f__sshRm, (genericfunc_t)&start_f__sshRm);
module_object.add_function("f_sshSsh", (genericfunc_t)&f__sshSsh, (genericfunc_t)&start_f__sshSsh);
module_object.add_function("f_sshExit", (genericfunc_t)&f__sshExit, (genericfunc_t)&start_f__sshExit);
}

static void post_init_module()
{
SSHCLIENTasp__PortType::module_object.post_init_module();
/* SSHCLIENTasp_functions.ttcn, line 47 */
template_t__ASP__SSH__ClearPrompt = NULL_VALUE;
/* SSHCLIENTasp_functions.ttcn, line 52 */
template_t__ASP__SSH__Connect = NULL_VALUE;
/* SSHCLIENTasp_functions.ttcn, line 53 */
template_t__ASP__SSH__Close = NULL_VALUE;
/* SSHCLIENTasp_functions.ttcn, line 54 */
template_t__ASP__SSH__PseudoPrompt = ANY_VALUE;
/* SSHCLIENTasp_functions.ttcn, line 55 */
template_t__ASP__SSH__Status = ANY_VALUE;
/* SSHCLIENTasp_functions.ttcn, line 56 */
template_t__ASP__SSH__Status__OK.status__code() = 0;
template_t__ASP__SSH__Status__OK.status__message() = ANY_VALUE;
/* SSHCLIENTasp_functions.ttcn, line 57 */
template_t__ASP__SSH = ANY_VALUE;
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "sshDefaultRespTimeout")) {
modulepar_sshDefaultRespTimeout.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "login_waittime")) {
modulepar_login__waittime.set_param(param);
return TRUE;
} else return FALSE;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("sshDefaultRespTimeout := ");
sshDefaultRespTimeout.log();
TTCN_Logger::log_event_str(", login_waittime := ");
login__waittime.log();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "SSH_CT")) {
SSH__CT_component_SSH__PCO.activate_port();
SSH__CT_component_sshRespStr = cs_2;
return TRUE;
} else if (!strcmp(component_type, "MTC_CT")) {
MTC__CT_component_cliClient.clean_up();
return TRUE;
} else return FALSE;
}

static boolean init_system_port(const char* component_type, const char* port_name)
{
if (!strcmp(component_type, "SSH_CT")) {
if (!strcmp(port_name, "SSH_PCO")) {
SSH__CT_component_SSH__PCO.safe_start();
return TRUE;
}
}
return FALSE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_sshCLIconversation")) {
CommandList clist;
FLOAT cliTimeOut;
clist.decode_text(function_arguments);
cliTimeOut.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshCLIconversation(");
clist.log();
TTCN_Logger::log_event_str(", ");
cliTimeOut.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshCLIconversation(clist, cliTimeOut);
TTCN_Runtime::function_finished("f_sshCLIconversation");
return TRUE;
} else if (!strcmp(function_name, "f_sshLogin")) {
CHARSTRING username;
CHARSTRING passwd;
username.decode_text(function_arguments);
passwd.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshLogin(");
username.log();
TTCN_Logger::log_event_str(", ");
passwd.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshLogin(username, passwd);
TTCN_Runtime::function_finished("f_sshLogin");
return TRUE;
} else if (!strcmp(function_name, "f_sshLogout")) {
BOOLEAN unmapSSH;
unmapSSH.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshLogout(");
unmapSSH.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshLogout(unmapSSH);
TTCN_Runtime::function_finished("f_sshLogout");
return TRUE;
} else if (!strcmp(function_name, "f_sshChmod")) {
CHARSTRING chmod__options;
CHARSTRING files2chmod;
chmod__options.decode_text(function_arguments);
files2chmod.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshChmod(");
chmod__options.log();
TTCN_Logger::log_event_str(", ");
files2chmod.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshChmod(chmod__options, files2chmod);
TTCN_Runtime::function_finished("f_sshChmod");
return TRUE;
} else if (!strcmp(function_name, "f_sshCd")) {
CHARSTRING dirname;
dirname.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshCd(");
dirname.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshCd(dirname);
TTCN_Runtime::function_finished("f_sshCd");
return TRUE;
} else if (!strcmp(function_name, "f_sshCp")) {
CHARSTRING scrfile;
CHARSTRING destfile;
scrfile.decode_text(function_arguments);
destfile.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshCp(");
scrfile.log();
TTCN_Logger::log_event_str(", ");
destfile.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshCp(scrfile, destfile);
TTCN_Runtime::function_finished("f_sshCp");
return TRUE;
} else if (!strcmp(function_name, "f_sshMv")) {
CHARSTRING mv__src;
CHARSTRING mv__dest;
mv__src.decode_text(function_arguments);
mv__dest.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshMv(");
mv__src.log();
TTCN_Logger::log_event_str(", ");
mv__dest.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshMv(mv__src, mv__dest);
TTCN_Runtime::function_finished("f_sshMv");
return TRUE;
} else if (!strcmp(function_name, "f_sshFileExists")) {
CHARSTRING myfile;
myfile.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshFileExists(");
myfile.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshFileExists(myfile);
TTCN_Runtime::function_finished("f_sshFileExists");
return TRUE;
} else if (!strcmp(function_name, "f_sshLs")) {
CHARSTRING lsparam;
lsparam.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshLs(");
lsparam.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshLs(lsparam);
TTCN_Runtime::function_finished("f_sshLs");
return TRUE;
} else if (!strcmp(function_name, "f_sshRm")) {
CHARSTRING rmparam;
rmparam.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshRm(");
rmparam.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshRm(rmparam);
TTCN_Runtime::function_finished("f_sshRm");
return TRUE;
} else if (!strcmp(function_name, "f_sshSsh")) {
CHARSTRING ipaddr;
CHARSTRING passwd;
ipaddr.decode_text(function_arguments);
passwd.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sshSsh(");
ipaddr.log();
TTCN_Logger::log_event_str(", ");
passwd.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sshSsh(ipaddr, passwd);
TTCN_Runtime::function_finished("f_sshSsh");
return TRUE;
} else if (!strcmp(function_name, "f_sshExit")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_sshExit().");
TTCN_Runtime::function_started(function_arguments);
f__sshExit();
TTCN_Runtime::function_finished("f_sshExit");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
