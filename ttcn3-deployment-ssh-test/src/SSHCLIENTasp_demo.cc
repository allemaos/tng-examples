// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4A
// for tango (tango@tango-VirtualBox) on Tue Jul 17 17:08:01 2018

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "SSHCLIENTasp_demo.hh"

namespace SSHCLIENTasp__demo {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean set_module_param(Module_Param& param);
static void log_module_param();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);
static void module_control_part();

/* Literal string constants */

static const CHARSTRING cs_2(7, "-l /tmp"),
cs_1(24, "Successfully logged in: "),
cs_0(18, "TC started nodeIP "),
cs_3(14, "f_sshLs: error");
static const unsigned char module_checksum[] = { 0x39, 0x12, 0xee, 0xf1, 0x8f, 0x2b, 0x00, 0x5d, 0xdb, 0x16, 0x9d, 0x1e, 0x05, 0x7c, 0x19, 0x5c };

/* Global variable definitions */

static INTEGER modulepar_clientCount;
const INTEGER& clientCount = modulepar_clientCount;
static INTEGER modulepar_loginCount;
const INTEGER& loginCount = modulepar_loginCount;
static INTEGER modulepar_opCount;
const INTEGER& opCount = modulepar_opCount;
static CHARSTRING modulepar_nodeIPAddr;
const CHARSTRING& nodeIPAddr = modulepar_nodeIPAddr;
static CHARSTRING modulepar_usrname;
const CHARSTRING& usrname = modulepar_usrname;
static CHARSTRING modulepar_pwd;
const CHARSTRING& pwd = modulepar_pwd;
TTCN_Module module_object("SSHCLIENTasp_demo", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, set_module_param, NULL, log_module_param, NULL, NULL, start_ptc_function, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

verdicttype testcase_TC(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("SSHCLIENTasp_demo", "TC", "SSHCLIENTasp_functions", "SSH_CT", "SSHCLIENTasp_functions", "SSH_CT", has_timer, timer_value);
/* SSHCLIENTasp_demo.ttcn, line 47 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_0 + nodeIPAddr).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_demo.ttcn, line 48 */
TTCN_Runtime::map_port(SYSTEM_COMPREF, SSHCLIENTasp__functions::SSH__CT_component_SSH__PCO.get_name(), self, SSHCLIENTasp__functions::SSH__CT_component_SSH__PCO.get_name());
/* SSHCLIENTasp_demo.ttcn, line 49 */
SSHCLIENTasp__functions::SSH__CT_component_SSH__PCO.send(SSHCLIENTasp__functions::t__ASP__SSH__SetRemoteHost(nodeIPAddr));
/* SSHCLIENTasp_demo.ttcn, line 50 */
if (SSHCLIENTasp__functions::f__sshLogin(usrname, pwd)) {
/* SSHCLIENTasp_demo.ttcn, line 51 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_1 + nodeIPAddr).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_demo.ttcn, line 53 */
CHARSTRING rawDircontent(SSHCLIENTasp__functions::f__sshLs(cs_2));
/* SSHCLIENTasp_demo.ttcn, line 54 */
if ((rawDircontent != cs_3)) {
/* SSHCLIENTasp_demo.ttcn, line 55 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Raw dircontent: sshRespStr=");
SSHCLIENTasp__functions::SSH__CT_component_sshRespStr.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_demo.ttcn, line 56 */
TTCN_Runtime::setverdict(PASS);
}
else {
/* SSHCLIENTasp_demo.ttcn, line 58 */
TTCN_Runtime::setverdict(FAIL);
}
/* SSHCLIENTasp_demo.ttcn, line 60 */
SSHCLIENTasp__functions::f__sshLogout(TRUE);
}
else {
/* SSHCLIENTasp_demo.ttcn, line 63 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Unable to login to node:");
nodeIPAddr.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_demo.ttcn, line 64 */
TTCN_Runtime::setverdict(FAIL);
}
/* SSHCLIENTasp_demo.ttcn, line 66 */
TTCN_Logger::log_str(TTCN_USER, "TC finished");
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC was stopped.");
}
return TTCN_Runtime::end_testcase();
}

void f__cliTester()
{
/* SSHCLIENTasp_demo.ttcn, line 79 */
TTCN_Logger::log_str(TTCN_USER, "f_cliTester started");
/* SSHCLIENTasp_demo.ttcn, line 80 */
SSHCLIENTasp__functions::SSH__CT_component_SSH__PCO.send(SSHCLIENTasp__functions::t__ASP__SSH__SetRemoteHost(nodeIPAddr));
{
/* SSHCLIENTasp_demo.ttcn, line 82 */
INTEGER i(0);
/* SSHCLIENTasp_demo.ttcn, line 82 */
for ( ; ; ) {
/* SSHCLIENTasp_demo.ttcn, line 82 */
if (!(i < loginCount)) break;
/* SSHCLIENTasp_demo.ttcn, line 83 */
if (SSHCLIENTasp__functions::f__sshLogin(usrname, pwd)) {
/* SSHCLIENTasp_demo.ttcn, line 84 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(cs_1 + nodeIPAddr).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
{
/* SSHCLIENTasp_demo.ttcn, line 85 */
INTEGER j(0);
/* SSHCLIENTasp_demo.ttcn, line 85 */
for ( ; ; ) {
/* SSHCLIENTasp_demo.ttcn, line 85 */
if (!(j < opCount)) break;
/* SSHCLIENTasp_demo.ttcn, line 86 */
CHARSTRING rawDircontent(SSHCLIENTasp__functions::f__sshLs(cs_2));
/* SSHCLIENTasp_demo.ttcn, line 87 */
if ((rawDircontent != cs_3)) {
/* SSHCLIENTasp_demo.ttcn, line 88 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Raw dircontent: sshRespStr=");
SSHCLIENTasp__functions::SSH__CT_component_sshRespStr.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_demo.ttcn, line 89 */
TTCN_Runtime::setverdict(PASS);
}
else {
/* SSHCLIENTasp_demo.ttcn, line 91 */
TTCN_Runtime::setverdict(FAIL);
}
/* SSHCLIENTasp_demo.ttcn, line 85 */
{
INTEGER tmp_0;
++j;
}
}
}
/* SSHCLIENTasp_demo.ttcn, line 95 */
SSHCLIENTasp__functions::f__sshLogout(TRUE);
}
else {
/* SSHCLIENTasp_demo.ttcn, line 98 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Unable to login to node:");
nodeIPAddr.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
/* SSHCLIENTasp_demo.ttcn, line 99 */
TTCN_Runtime::setverdict(FAIL);
}
/* SSHCLIENTasp_demo.ttcn, line 82 */
{
INTEGER tmp_1;
++i;
}
}
}
/* SSHCLIENTasp_demo.ttcn, line 104 */
TTCN_Logger::log_str(TTCN_USER, "f_cliTester finished");
}

void start_f__cliTester(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cliTester(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "SSHCLIENTasp_demo", "f_cliTester", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

verdicttype testcase_TC__parallel(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("SSHCLIENTasp_demo", "TC_parallel", "SSHCLIENTasp_functions", "MTC_CT", "SSHCLIENTasp_functions", "MTC_CT", has_timer, timer_value);
{
/* SSHCLIENTasp_demo.ttcn, line 113 */
INTEGER i(0);
/* SSHCLIENTasp_demo.ttcn, line 113 */
for ( ; ; ) {
/* SSHCLIENTasp_demo.ttcn, line 113 */
if (!(i < clientCount)) break;
/* SSHCLIENTasp_demo.ttcn, line 114 */
SSHCLIENTasp__functions::MTC__CT_component_cliClient[i] = TTCN_Runtime::create_component("SSHCLIENTasp_functions", "SSH_CT", NULL, NULL, FALSE);
/* SSHCLIENTasp_demo.ttcn, line 115 */
start_f__cliTester(const_cast< const SSHCLIENTasp__functions::SSH__CT__list&>(SSHCLIENTasp__functions::MTC__CT_component_cliClient)[i]);
/* SSHCLIENTasp_demo.ttcn, line 113 */
{
INTEGER tmp_3;
++i;
}
}
}
/* SSHCLIENTasp_demo.ttcn, line 118 */
{
tmp_4:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = TTCN_Runtime::component_done(ALL_COMPREF);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_4;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_4;
}
/* SSHCLIENTasp_demo.ttcn, line 118 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file SSHCLIENTasp_demo.ttcn, line 118.");
TTCN_Snapshot::take_new(TRUE);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_parallel was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
SSHCLIENTasp__functions::module_object.pre_init_module();
/* SSHCLIENTasp_demo.ttcn, line 33 */
modulepar_clientCount = 1;
/* SSHCLIENTasp_demo.ttcn, line 34 */
modulepar_loginCount = 1;
/* SSHCLIENTasp_demo.ttcn, line 35 */
modulepar_opCount = 1;
module_object.add_testcase_nonpard("TC", testcase_TC);
module_object.add_function("f_cliTester", (genericfunc_t)&f__cliTester, (genericfunc_t)&start_f__cliTester);
module_object.add_testcase_nonpard("TC_parallel", testcase_TC__parallel);
}

static void post_init_module()
{
SSHCLIENTasp__functions::module_object.post_init_module();
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "clientCount")) {
modulepar_clientCount.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "loginCount")) {
modulepar_loginCount.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "opCount")) {
modulepar_opCount.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "nodeIPAddr")) {
modulepar_nodeIPAddr.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "usrname")) {
modulepar_usrname.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "pwd")) {
modulepar_pwd.set_param(param);
return TRUE;
} else return FALSE;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("clientCount := ");
clientCount.log();
TTCN_Logger::log_event_str(", loginCount := ");
loginCount.log();
TTCN_Logger::log_event_str(", opCount := ");
opCount.log();
TTCN_Logger::log_event_str(", nodeIPAddr := ");
nodeIPAddr.log();
TTCN_Logger::log_event_str(", usrname := ");
usrname.log();
TTCN_Logger::log_event_str(", pwd := ");
pwd.log();
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_cliTester")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cliTester().");
TTCN_Runtime::function_started(function_arguments);
f__cliTester();
TTCN_Runtime::function_finished("f_cliTester");
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Runtime::begin_controlpart("SSHCLIENTasp_demo");
/* SSHCLIENTasp_demo.ttcn, line 123 */
testcase_TC(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
