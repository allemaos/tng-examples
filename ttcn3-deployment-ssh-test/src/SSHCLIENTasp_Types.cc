// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4A
// for tango (tango@tango-VirtualBox) on Wed Jul 11 15:03:58 2018

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "SSHCLIENTasp_Types.hh"

namespace SSHCLIENTasp__Types {

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x0f, 0x13, 0xc1, 0x7d, 0xa2, 0xe6, 0xac, 0x32, 0xde, 0x8c, 0x5d, 0xe2, 0x29, 0xaf, 0x71, 0x8f };

/* Global variable definitions */

const XERdescriptor_t       ReadMode_xer_ = { {"ReadMode>\n", "ReadMode>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ReadMode_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ReadMode_descr_ = { "@SSHCLIENTasp_Types.ReadMode", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ReadMode_xer_, &ReadMode_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH_xer_ = { {"ASP_SSH>\n", "ASP_SSH>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH_xer_, &ASP__SSH_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__Close
const TTCN_Typedescriptor_t ASP__SSH__Close_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_Close", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__PseudoPrompt
const TTCN_Typedescriptor_t ASP__SSH__PseudoPrompt_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__Status_status__code_xer_ = { {"status_code>\n", "status_code>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__Status_status__code_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__Status_status__code_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_Status.status_code", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ASP__SSH__Status_status__code_xer_, &ASP__SSH__Status_status__code_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__Status_status__message_xer_ = { {"status_message>\n", "status_message>\n"}, {16, 16}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__Status_status__message_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__Status_status__message_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_Status.status_message", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__Status_status__message_xer_, &ASP__SSH__Status_status__message_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__Status
const TTCN_Typedescriptor_t ASP__SSH__Status_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_Status", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetPrompt_prompt__name_xer_ = { {"prompt_name>\n", "prompt_name>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetPrompt_prompt__name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetPrompt_prompt__name_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt.prompt_name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetPrompt_prompt__name_xer_, &ASP__SSH__SetPrompt_prompt__name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetPrompt_prompt__value_xer_ = { {"prompt_value>\n", "prompt_value>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetPrompt_prompt__value_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetPrompt_prompt__value_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt.prompt_value", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetPrompt_prompt__value_xer_, &ASP__SSH__SetPrompt_prompt__value_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__SetPrompt
const TTCN_Typedescriptor_t ASP__SSH__SetPrompt_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetRegexPrompt_prompt__name_xer_ = { {"prompt_name>\n", "prompt_name>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetRegexPrompt_prompt__name_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetRegexPrompt_prompt__name_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.prompt_name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetRegexPrompt_prompt__name_xer_, &ASP__SSH__SetRegexPrompt_prompt__name_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetRegexPrompt_prompt__value_xer_ = { {"prompt_value>\n", "prompt_value>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetRegexPrompt_prompt__value_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetRegexPrompt_prompt__value_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.prompt_value", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetRegexPrompt_prompt__value_xer_, &ASP__SSH__SetRegexPrompt_prompt__value_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__SetRegexPrompt
const TTCN_Typedescriptor_t ASP__SSH__SetRegexPrompt_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__ClearPrompt
const TTCN_Typedescriptor_t ASP__SSH__ClearPrompt_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_ClearPrompt", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetMode_readmode_xer_ = { {"readmode>\n", "readmode>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetMode_readmode_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_OERdescriptor_t ASP__SSH__SetMode_readmode_oer_ = { -1, FALSE, -1, FALSE, 0, 0, NULL, 0, NULL };
const TTCN_Typedescriptor_t ASP__SSH__SetMode_readmode_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetMode.readmode", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ASP__SSH__SetMode_readmode_xer_, &ASP__SSH__SetMode_readmode_json_, &ASP__SSH__SetMode_readmode_oer_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__SetMode
const TTCN_Typedescriptor_t ASP__SSH__SetMode_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetMode", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__Connect
const TTCN_Typedescriptor_t ASP__SSH__Connect_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_Connect", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetUserID_usrid_xer_ = { {"usrid>\n", "usrid>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetUserID_usrid_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetUserID_usrid_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetUserID.usrid", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetUserID_usrid_xer_, &ASP__SSH__SetUserID_usrid_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__SetUserID
const TTCN_Typedescriptor_t ASP__SSH__SetUserID_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetUserID", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetRemoteHost_remotehost_xer_ = { {"remotehost>\n", "remotehost>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetRemoteHost_remotehost_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetRemoteHost_remotehost_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.remotehost", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetRemoteHost_remotehost_xer_, &ASP__SSH__SetRemoteHost_remotehost_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__SetRemoteHost
const TTCN_Typedescriptor_t ASP__SSH__SetRemoteHost_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetRemotePort_remoteport_xer_ = { {"remoteport>\n", "remoteport>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetRemotePort_remoteport_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetRemotePort_remoteport_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.remoteport", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetRemotePort_remoteport_xer_, &ASP__SSH__SetRemotePort_remoteport_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__SetRemotePort
const TTCN_Typedescriptor_t ASP__SSH__SetRemotePort_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetRemotePort", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ASP__SSH__SetAdditionalParameters_additionalparameters_xer_ = { {"additionalparameters>\n", "additionalparameters>\n"}, {22, 22}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t ASP__SSH__SetAdditionalParameters_additionalparameters_json_ = { FALSE, NULL, FALSE, NULL, FALSE, FALSE };
const TTCN_Typedescriptor_t ASP__SSH__SetAdditionalParameters_additionalparameters_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.additionalparameters", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ASP__SSH__SetAdditionalParameters_additionalparameters_xer_, &ASP__SSH__SetAdditionalParameters_additionalparameters_json_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ASP__SSH__SetAdditionalParameters
const TTCN_Typedescriptor_t ASP__SSH__SetAdditionalParameters_descr_ = { "@SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters", NULL, NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
TTCN_Module module_object("SSHCLIENTasp_Types", __DATE__, __TIME__, module_checksum, NULL, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

ASP__SSH__Close::ASP__SSH__Close()
{
bound_flag = FALSE;
}

ASP__SSH__Close::ASP__SSH__Close(null_type)
{
bound_flag = TRUE;
}

ASP__SSH__Close::ASP__SSH__Close(const ASP__SSH__Close& other_value)
{
other_value.must_bound("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
bound_flag = TRUE;
}

ASP__SSH__Close& ASP__SSH__Close::operator=(null_type)
{
bound_flag = TRUE;
return *this;
}

ASP__SSH__Close& ASP__SSH__Close::operator=(const ASP__SSH__Close& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
bound_flag = TRUE;
return *this;
}

boolean ASP__SSH__Close::operator==(null_type) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
return TRUE;
}

boolean ASP__SSH__Close::operator==(const ASP__SSH__Close& other_value) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
return TRUE;
}

void ASP__SSH__Close::log() const
{
if (bound_flag) TTCN_Logger::log_event_str("{ }");
else TTCN_Logger::log_event_unbound();
}

void ASP__SSH__Close::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "empty record/set value (i.e. { })");
  if (param.get_type()!=Module_Param::MP_Value_List || param.get_size()>0) {
    param.type_error("empty record/set value (i.e. { })", "@SSHCLIENTasp_Types.ASP_SSH_Close");
  }
  bound_flag = TRUE;
}

void ASP__SSH__Close::encode_text(Text_Buf& /*text_buf*/) const
{
must_bound("Text encoder: Encoding an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
}

void ASP__SSH__Close::decode_text(Text_Buf& /*text_buf*/)
{
bound_flag = TRUE;
}

void ASP__SSH__Close_template::copy_template(const ASP__SSH__Close_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__Close_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
break;
}
}

ASP__SSH__Close_template::ASP__SSH__Close_template()
{
}

ASP__SSH__Close_template::ASP__SSH__Close_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__Close_template::ASP__SSH__Close_template(null_type)
 : Base_Template(SPECIFIC_VALUE)
{
}

ASP__SSH__Close_template::ASP__SSH__Close_template(const ASP__SSH__Close& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
}

ASP__SSH__Close_template::ASP__SSH__Close_template(const OPTIONAL<ASP__SSH__Close>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_Close from an unbound optional field.");
}
}

ASP__SSH__Close_template::ASP__SSH__Close_template(const ASP__SSH__Close_template& other_value)
: Base_Template(){
copy_template(other_value);
}

ASP__SSH__Close_template::~ASP__SSH__Close_template()
{
clean_up();
}

void ASP__SSH__Close_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST)
delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__Close_template& ASP__SSH__Close_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__Close_template& ASP__SSH__Close_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__Close_template& ASP__SSH__Close_template::operator=(const ASP__SSH__Close& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__Close_template& ASP__SSH__Close_template::operator=(const OPTIONAL<ASP__SSH__Close>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
}
return *this;
}

ASP__SSH__Close_template& ASP__SSH__Close_template::operator=(const ASP__SSH__Close_template& other_value)
{
if (&other_value != this) {
clean_up();
set_selection(other_value);
}
return *this;
}

boolean ASP__SSH__Close_template::match(null_type other_value,boolean) const
{
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
return TRUE;
case OMIT_VALUE:
return FALSE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
}
return FALSE;
}

boolean ASP__SSH__Close_template::match(const ASP__SSH__Close& other_value, boolean) const
{
if (!other_value.is_bound()) return FALSE;
return match(NULL_VALUE);
}

ASP__SSH__Close ASP__SSH__Close_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
return NULL_VALUE;
}

void ASP__SSH__Close_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__Close_template[list_length];
}

ASP__SSH__Close_template& ASP__SSH__Close_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
return value_list.list_value[list_index];
}

void ASP__SSH__Close_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__Close_template::log_match(const ASP__SSH__Close& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void ASP__SSH__Close_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
}
}

void ASP__SSH__Close_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__Close_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
}
}

void ASP__SSH__Close_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "empty record/set template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__Close_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (param.get_size()>0) param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_Close");
    *this = NULL_VALUE;
    break;
  default:
    param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_Close");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__Close_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_Close");
}

boolean ASP__SSH__Close_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__Close_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__PseudoPrompt::ASP__SSH__PseudoPrompt()
{
bound_flag = FALSE;
}

ASP__SSH__PseudoPrompt::ASP__SSH__PseudoPrompt(null_type)
{
bound_flag = TRUE;
}

ASP__SSH__PseudoPrompt::ASP__SSH__PseudoPrompt(const ASP__SSH__PseudoPrompt& other_value)
{
other_value.must_bound("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
bound_flag = TRUE;
}

ASP__SSH__PseudoPrompt& ASP__SSH__PseudoPrompt::operator=(null_type)
{
bound_flag = TRUE;
return *this;
}

ASP__SSH__PseudoPrompt& ASP__SSH__PseudoPrompt::operator=(const ASP__SSH__PseudoPrompt& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
bound_flag = TRUE;
return *this;
}

boolean ASP__SSH__PseudoPrompt::operator==(null_type) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
return TRUE;
}

boolean ASP__SSH__PseudoPrompt::operator==(const ASP__SSH__PseudoPrompt& other_value) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
return TRUE;
}

void ASP__SSH__PseudoPrompt::log() const
{
if (bound_flag) TTCN_Logger::log_event_str("{ }");
else TTCN_Logger::log_event_unbound();
}

void ASP__SSH__PseudoPrompt::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "empty record/set value (i.e. { })");
  if (param.get_type()!=Module_Param::MP_Value_List || param.get_size()>0) {
    param.type_error("empty record/set value (i.e. { })", "@SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt");
  }
  bound_flag = TRUE;
}

void ASP__SSH__PseudoPrompt::encode_text(Text_Buf& /*text_buf*/) const
{
must_bound("Text encoder: Encoding an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
}

void ASP__SSH__PseudoPrompt::decode_text(Text_Buf& /*text_buf*/)
{
bound_flag = TRUE;
}

void ASP__SSH__PseudoPrompt_template::copy_template(const ASP__SSH__PseudoPrompt_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__PseudoPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
break;
}
}

ASP__SSH__PseudoPrompt_template::ASP__SSH__PseudoPrompt_template()
{
}

ASP__SSH__PseudoPrompt_template::ASP__SSH__PseudoPrompt_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__PseudoPrompt_template::ASP__SSH__PseudoPrompt_template(null_type)
 : Base_Template(SPECIFIC_VALUE)
{
}

ASP__SSH__PseudoPrompt_template::ASP__SSH__PseudoPrompt_template(const ASP__SSH__PseudoPrompt& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
}

ASP__SSH__PseudoPrompt_template::ASP__SSH__PseudoPrompt_template(const OPTIONAL<ASP__SSH__PseudoPrompt>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt from an unbound optional field.");
}
}

ASP__SSH__PseudoPrompt_template::ASP__SSH__PseudoPrompt_template(const ASP__SSH__PseudoPrompt_template& other_value)
: Base_Template(){
copy_template(other_value);
}

ASP__SSH__PseudoPrompt_template::~ASP__SSH__PseudoPrompt_template()
{
clean_up();
}

void ASP__SSH__PseudoPrompt_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST)
delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__PseudoPrompt_template& ASP__SSH__PseudoPrompt_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__PseudoPrompt_template& ASP__SSH__PseudoPrompt_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__PseudoPrompt_template& ASP__SSH__PseudoPrompt_template::operator=(const ASP__SSH__PseudoPrompt& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__PseudoPrompt_template& ASP__SSH__PseudoPrompt_template::operator=(const OPTIONAL<ASP__SSH__PseudoPrompt>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
}
return *this;
}

ASP__SSH__PseudoPrompt_template& ASP__SSH__PseudoPrompt_template::operator=(const ASP__SSH__PseudoPrompt_template& other_value)
{
if (&other_value != this) {
clean_up();
set_selection(other_value);
}
return *this;
}

boolean ASP__SSH__PseudoPrompt_template::match(null_type other_value,boolean) const
{
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
return TRUE;
case OMIT_VALUE:
return FALSE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
}
return FALSE;
}

boolean ASP__SSH__PseudoPrompt_template::match(const ASP__SSH__PseudoPrompt& other_value, boolean) const
{
if (!other_value.is_bound()) return FALSE;
return match(NULL_VALUE);
}

ASP__SSH__PseudoPrompt ASP__SSH__PseudoPrompt_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
return NULL_VALUE;
}

void ASP__SSH__PseudoPrompt_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__PseudoPrompt_template[list_length];
}

ASP__SSH__PseudoPrompt_template& ASP__SSH__PseudoPrompt_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
return value_list.list_value[list_index];
}

void ASP__SSH__PseudoPrompt_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__PseudoPrompt_template::log_match(const ASP__SSH__PseudoPrompt& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void ASP__SSH__PseudoPrompt_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
}
}

void ASP__SSH__PseudoPrompt_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__PseudoPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
}
}

void ASP__SSH__PseudoPrompt_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "empty record/set template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__PseudoPrompt_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (param.get_size()>0) param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt");
    *this = NULL_VALUE;
    break;
  default:
    param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__PseudoPrompt_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt");
}

boolean ASP__SSH__PseudoPrompt_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__PseudoPrompt_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__Status::ASP__SSH__Status()
{
}

ASP__SSH__Status::ASP__SSH__Status(const INTEGER& par_status__code,
    const CHARSTRING& par_status__message)
  :   field_status__code(par_status__code),
  field_status__message(par_status__message)
{
}

ASP__SSH__Status::ASP__SSH__Status(const ASP__SSH__Status& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
if (other_value.status__code().is_bound()) field_status__code = other_value.status__code();
else field_status__code.clean_up();
if (other_value.status__message().is_bound()) field_status__message = other_value.status__message();
else field_status__message.clean_up();
}

void ASP__SSH__Status::clean_up()
{
field_status__code.clean_up();
field_status__message.clean_up();
}

ASP__SSH__Status& ASP__SSH__Status::operator=(const ASP__SSH__Status& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
  if (other_value.status__code().is_bound()) field_status__code = other_value.status__code();
  else field_status__code.clean_up();
  if (other_value.status__message().is_bound()) field_status__message = other_value.status__message();
  else field_status__message.clean_up();
}
return *this;
}

boolean ASP__SSH__Status::operator==(const ASP__SSH__Status& other_value) const
{
return field_status__code==other_value.field_status__code
  && field_status__message==other_value.field_status__message;
}

boolean ASP__SSH__Status::is_bound() const
{
if(field_status__code.is_bound()) return TRUE;
if(field_status__message.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__Status::is_value() const
{
if(!field_status__code.is_value()) return FALSE;
if(!field_status__message.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__Status::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ status_code := ");
field_status__code.log();
TTCN_Logger::log_event_str(", status_message := ");
field_status__message.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__Status::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_Status has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) status__code().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) status__message().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "status_code")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          status__code().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "status_message")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          status__message().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_Status: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_Status");
  }
}

void ASP__SSH__Status::set_implicit_omit()
{
if (status__code().is_bound()) status__code().set_implicit_omit();
if (status__message().is_bound()) status__message().set_implicit_omit();
}

void ASP__SSH__Status::encode_text(Text_Buf& text_buf) const
{
field_status__code.encode_text(text_buf);
field_status__message.encode_text(text_buf);
}

void ASP__SSH__Status::decode_text(Text_Buf& text_buf)
{
field_status__code.decode_text(text_buf);
field_status__message.decode_text(text_buf);
}

struct ASP__SSH__Status_template::single_value_struct {
INTEGER_template field_status__code;
CHARSTRING_template field_status__message;
};

void ASP__SSH__Status_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_status__code = ANY_VALUE;
single_value->field_status__message = ANY_VALUE;
}
}
}

void ASP__SSH__Status_template::copy_value(const ASP__SSH__Status& other_value)
{
single_value = new single_value_struct;
if (other_value.status__code().is_bound()) {
  single_value->field_status__code = other_value.status__code();
} else {
  single_value->field_status__code.clean_up();
}
if (other_value.status__message().is_bound()) {
  single_value->field_status__message = other_value.status__message();
} else {
  single_value->field_status__message.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__Status_template::copy_template(const ASP__SSH__Status_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.status__code().get_selection()) {
single_value->field_status__code = other_value.status__code();
} else {
single_value->field_status__code.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.status__message().get_selection()) {
single_value->field_status__message = other_value.status__message();
} else {
single_value->field_status__message.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__Status_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
break;
}
set_selection(other_value);
}

ASP__SSH__Status_template::ASP__SSH__Status_template()
{
}

ASP__SSH__Status_template::ASP__SSH__Status_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__Status_template::ASP__SSH__Status_template(const ASP__SSH__Status& other_value)
{
copy_value(other_value);
}

ASP__SSH__Status_template::ASP__SSH__Status_template(const OPTIONAL<ASP__SSH__Status>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__Status&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_Status from an unbound optional field.");
}
}

ASP__SSH__Status_template::ASP__SSH__Status_template(const ASP__SSH__Status_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__Status_template::~ASP__SSH__Status_template()
{
clean_up();
}

ASP__SSH__Status_template& ASP__SSH__Status_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__Status_template& ASP__SSH__Status_template::operator=(const ASP__SSH__Status& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__Status_template& ASP__SSH__Status_template::operator=(const OPTIONAL<ASP__SSH__Status>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__Status&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
}
return *this;
}

ASP__SSH__Status_template& ASP__SSH__Status_template::operator=(const ASP__SSH__Status_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__Status_template::match(const ASP__SSH__Status& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.status__code().is_bound()) return FALSE;
if(!single_value->field_status__code.match(other_value.status__code(), legacy))return FALSE;
if(!other_value.status__message().is_bound()) return FALSE;
if(!single_value->field_status__message.match(other_value.status__message(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
}
return FALSE;
}

boolean ASP__SSH__Status_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_status__code.is_bound()) return TRUE;
if (single_value->field_status__message.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__Status_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_status__code.is_value()) return FALSE;
if (!single_value->field_status__message.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__Status_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__Status ASP__SSH__Status_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
ASP__SSH__Status ret_val;
if (single_value->field_status__code.is_bound()) {
ret_val.status__code() = single_value->field_status__code.valueof();
}
if (single_value->field_status__message.is_bound()) {
ret_val.status__message() = single_value->field_status__message.valueof();
}
return ret_val;
}

void ASP__SSH__Status_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__Status_template[list_length];
}

ASP__SSH__Status_template& ASP__SSH__Status_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
return value_list.list_value[list_index];
}

INTEGER_template& ASP__SSH__Status_template::status__code()
{
set_specific();
return single_value->field_status__code;
}

const INTEGER_template& ASP__SSH__Status_template::status__code() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field status_code of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
return single_value->field_status__code;
}

CHARSTRING_template& ASP__SSH__Status_template::status__message()
{
set_specific();
return single_value->field_status__message;
}

const CHARSTRING_template& ASP__SSH__Status_template::status__message() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field status_message of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
return single_value->field_status__message;
}

int ASP__SSH__Status_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_Status which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_Status containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_Status containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_Status containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_Status containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_Status containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
  }
  return 0;
}

void ASP__SSH__Status_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ status_code := ");
single_value->field_status__code.log();
TTCN_Logger::log_event_str(", status_message := ");
single_value->field_status__message.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__Status_template::log_match(const ASP__SSH__Status& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_status__code.match(match_value.status__code(), legacy)){
TTCN_Logger::log_logmatch_info(".status_code");
single_value->field_status__code.log_match(match_value.status__code(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_status__message.match(match_value.status__message(), legacy)){
TTCN_Logger::log_logmatch_info(".status_message");
single_value->field_status__message.log_match(match_value.status__message(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ status_code := ");
single_value->field_status__code.log_match(match_value.status__code(), legacy);
TTCN_Logger::log_event_str(", status_message := ");
single_value->field_status__message.log_match(match_value.status__message(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__Status_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_status__code.encode_text(text_buf);
single_value->field_status__message.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
}
}

void ASP__SSH__Status_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_status__code.decode_text(text_buf);
single_value->field_status__message.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__Status_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_Status.");
}
}

void ASP__SSH__Status_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__Status_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_Status has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) status__code().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) status__message().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "status_code")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          status__code().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "status_message")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          status__message().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_Status: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_Status");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__Status_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_status__code.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_Status");
single_value->field_status__message.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_Status");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_Status");
}

boolean ASP__SSH__Status_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__Status_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__SetPrompt::ASP__SSH__SetPrompt()
{
}

ASP__SSH__SetPrompt::ASP__SSH__SetPrompt(const CHARSTRING& par_prompt__name,
    const CHARSTRING& par_prompt__value)
  :   field_prompt__name(par_prompt__name),
  field_prompt__value(par_prompt__value)
{
}

ASP__SSH__SetPrompt::ASP__SSH__SetPrompt(const ASP__SSH__SetPrompt& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
if (other_value.prompt__name().is_bound()) field_prompt__name = other_value.prompt__name();
else field_prompt__name.clean_up();
if (other_value.prompt__value().is_bound()) field_prompt__value = other_value.prompt__value();
else field_prompt__value.clean_up();
}

void ASP__SSH__SetPrompt::clean_up()
{
field_prompt__name.clean_up();
field_prompt__value.clean_up();
}

ASP__SSH__SetPrompt& ASP__SSH__SetPrompt::operator=(const ASP__SSH__SetPrompt& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
  if (other_value.prompt__name().is_bound()) field_prompt__name = other_value.prompt__name();
  else field_prompt__name.clean_up();
  if (other_value.prompt__value().is_bound()) field_prompt__value = other_value.prompt__value();
  else field_prompt__value.clean_up();
}
return *this;
}

boolean ASP__SSH__SetPrompt::operator==(const ASP__SSH__SetPrompt& other_value) const
{
return field_prompt__name==other_value.field_prompt__name
  && field_prompt__value==other_value.field_prompt__value;
}

boolean ASP__SSH__SetPrompt::is_bound() const
{
if(field_prompt__name.is_bound()) return TRUE;
if(field_prompt__value.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__SetPrompt::is_value() const
{
if(!field_prompt__name.is_value()) return FALSE;
if(!field_prompt__value.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__SetPrompt::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ prompt_name := ");
field_prompt__name.log();
TTCN_Logger::log_event_str(", prompt_value := ");
field_prompt__value.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__SetPrompt::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) prompt__name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) prompt__value().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_value")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__value().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt");
  }
}

void ASP__SSH__SetPrompt::set_implicit_omit()
{
if (prompt__name().is_bound()) prompt__name().set_implicit_omit();
if (prompt__value().is_bound()) prompt__value().set_implicit_omit();
}

void ASP__SSH__SetPrompt::encode_text(Text_Buf& text_buf) const
{
field_prompt__name.encode_text(text_buf);
field_prompt__value.encode_text(text_buf);
}

void ASP__SSH__SetPrompt::decode_text(Text_Buf& text_buf)
{
field_prompt__name.decode_text(text_buf);
field_prompt__value.decode_text(text_buf);
}

struct ASP__SSH__SetPrompt_template::single_value_struct {
CHARSTRING_template field_prompt__name;
CHARSTRING_template field_prompt__value;
};

void ASP__SSH__SetPrompt_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_prompt__name = ANY_VALUE;
single_value->field_prompt__value = ANY_VALUE;
}
}
}

void ASP__SSH__SetPrompt_template::copy_value(const ASP__SSH__SetPrompt& other_value)
{
single_value = new single_value_struct;
if (other_value.prompt__name().is_bound()) {
  single_value->field_prompt__name = other_value.prompt__name();
} else {
  single_value->field_prompt__name.clean_up();
}
if (other_value.prompt__value().is_bound()) {
  single_value->field_prompt__value = other_value.prompt__value();
} else {
  single_value->field_prompt__value.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__SetPrompt_template::copy_template(const ASP__SSH__SetPrompt_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.prompt__name().get_selection()) {
single_value->field_prompt__name = other_value.prompt__name();
} else {
single_value->field_prompt__name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.prompt__value().get_selection()) {
single_value->field_prompt__value = other_value.prompt__value();
} else {
single_value->field_prompt__value.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__SetPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
break;
}
set_selection(other_value);
}

ASP__SSH__SetPrompt_template::ASP__SSH__SetPrompt_template()
{
}

ASP__SSH__SetPrompt_template::ASP__SSH__SetPrompt_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__SetPrompt_template::ASP__SSH__SetPrompt_template(const ASP__SSH__SetPrompt& other_value)
{
copy_value(other_value);
}

ASP__SSH__SetPrompt_template::ASP__SSH__SetPrompt_template(const OPTIONAL<ASP__SSH__SetPrompt>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetPrompt&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt from an unbound optional field.");
}
}

ASP__SSH__SetPrompt_template::ASP__SSH__SetPrompt_template(const ASP__SSH__SetPrompt_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__SetPrompt_template::~ASP__SSH__SetPrompt_template()
{
clean_up();
}

ASP__SSH__SetPrompt_template& ASP__SSH__SetPrompt_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__SetPrompt_template& ASP__SSH__SetPrompt_template::operator=(const ASP__SSH__SetPrompt& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__SetPrompt_template& ASP__SSH__SetPrompt_template::operator=(const OPTIONAL<ASP__SSH__SetPrompt>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetPrompt&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
}
return *this;
}

ASP__SSH__SetPrompt_template& ASP__SSH__SetPrompt_template::operator=(const ASP__SSH__SetPrompt_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__SetPrompt_template::match(const ASP__SSH__SetPrompt& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.prompt__name().is_bound()) return FALSE;
if(!single_value->field_prompt__name.match(other_value.prompt__name(), legacy))return FALSE;
if(!other_value.prompt__value().is_bound()) return FALSE;
if(!single_value->field_prompt__value.match(other_value.prompt__value(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
}
return FALSE;
}

boolean ASP__SSH__SetPrompt_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_prompt__name.is_bound()) return TRUE;
if (single_value->field_prompt__value.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__SetPrompt_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_prompt__name.is_value()) return FALSE;
if (!single_value->field_prompt__value.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__SetPrompt_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__SetPrompt ASP__SSH__SetPrompt_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
ASP__SSH__SetPrompt ret_val;
if (single_value->field_prompt__name.is_bound()) {
ret_val.prompt__name() = single_value->field_prompt__name.valueof();
}
if (single_value->field_prompt__value.is_bound()) {
ret_val.prompt__value() = single_value->field_prompt__value.valueof();
}
return ret_val;
}

void ASP__SSH__SetPrompt_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__SetPrompt_template[list_length];
}

ASP__SSH__SetPrompt_template& ASP__SSH__SetPrompt_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ASP__SSH__SetPrompt_template::prompt__name()
{
set_specific();
return single_value->field_prompt__name;
}

const CHARSTRING_template& ASP__SSH__SetPrompt_template::prompt__name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field prompt_name of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
return single_value->field_prompt__name;
}

CHARSTRING_template& ASP__SSH__SetPrompt_template::prompt__value()
{
set_specific();
return single_value->field_prompt__value;
}

const CHARSTRING_template& ASP__SSH__SetPrompt_template::prompt__value() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field prompt_value of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
return single_value->field_prompt__value;
}

int ASP__SSH__SetPrompt_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
  }
  return 0;
}

void ASP__SSH__SetPrompt_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ prompt_name := ");
single_value->field_prompt__name.log();
TTCN_Logger::log_event_str(", prompt_value := ");
single_value->field_prompt__value.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__SetPrompt_template::log_match(const ASP__SSH__SetPrompt& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_prompt__name.match(match_value.prompt__name(), legacy)){
TTCN_Logger::log_logmatch_info(".prompt_name");
single_value->field_prompt__name.log_match(match_value.prompt__name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_prompt__value.match(match_value.prompt__value(), legacy)){
TTCN_Logger::log_logmatch_info(".prompt_value");
single_value->field_prompt__value.log_match(match_value.prompt__value(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ prompt_name := ");
single_value->field_prompt__name.log_match(match_value.prompt__name(), legacy);
TTCN_Logger::log_event_str(", prompt_value := ");
single_value->field_prompt__value.log_match(match_value.prompt__value(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__SetPrompt_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_prompt__name.encode_text(text_buf);
single_value->field_prompt__value.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
}
}

void ASP__SSH__SetPrompt_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_prompt__name.decode_text(text_buf);
single_value->field_prompt__value.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__SetPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt.");
}
}

void ASP__SSH__SetPrompt_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__SetPrompt_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) prompt__name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) prompt__value().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_value")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__value().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetPrompt: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__SetPrompt_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_prompt__name.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt");
single_value->field_prompt__value.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetPrompt");
}

boolean ASP__SSH__SetPrompt_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__SetPrompt_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__SetRegexPrompt::ASP__SSH__SetRegexPrompt()
{
}

ASP__SSH__SetRegexPrompt::ASP__SSH__SetRegexPrompt(const CHARSTRING& par_prompt__name,
    const CHARSTRING& par_prompt__value)
  :   field_prompt__name(par_prompt__name),
  field_prompt__value(par_prompt__value)
{
}

ASP__SSH__SetRegexPrompt::ASP__SSH__SetRegexPrompt(const ASP__SSH__SetRegexPrompt& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
if (other_value.prompt__name().is_bound()) field_prompt__name = other_value.prompt__name();
else field_prompt__name.clean_up();
if (other_value.prompt__value().is_bound()) field_prompt__value = other_value.prompt__value();
else field_prompt__value.clean_up();
}

void ASP__SSH__SetRegexPrompt::clean_up()
{
field_prompt__name.clean_up();
field_prompt__value.clean_up();
}

ASP__SSH__SetRegexPrompt& ASP__SSH__SetRegexPrompt::operator=(const ASP__SSH__SetRegexPrompt& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
  if (other_value.prompt__name().is_bound()) field_prompt__name = other_value.prompt__name();
  else field_prompt__name.clean_up();
  if (other_value.prompt__value().is_bound()) field_prompt__value = other_value.prompt__value();
  else field_prompt__value.clean_up();
}
return *this;
}

boolean ASP__SSH__SetRegexPrompt::operator==(const ASP__SSH__SetRegexPrompt& other_value) const
{
return field_prompt__name==other_value.field_prompt__name
  && field_prompt__value==other_value.field_prompt__value;
}

boolean ASP__SSH__SetRegexPrompt::is_bound() const
{
if(field_prompt__name.is_bound()) return TRUE;
if(field_prompt__value.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__SetRegexPrompt::is_value() const
{
if(!field_prompt__name.is_value()) return FALSE;
if(!field_prompt__value.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__SetRegexPrompt::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ prompt_name := ");
field_prompt__name.log();
TTCN_Logger::log_event_str(", prompt_value := ");
field_prompt__value.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__SetRegexPrompt::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) prompt__name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) prompt__value().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_value")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__value().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt");
  }
}

void ASP__SSH__SetRegexPrompt::set_implicit_omit()
{
if (prompt__name().is_bound()) prompt__name().set_implicit_omit();
if (prompt__value().is_bound()) prompt__value().set_implicit_omit();
}

void ASP__SSH__SetRegexPrompt::encode_text(Text_Buf& text_buf) const
{
field_prompt__name.encode_text(text_buf);
field_prompt__value.encode_text(text_buf);
}

void ASP__SSH__SetRegexPrompt::decode_text(Text_Buf& text_buf)
{
field_prompt__name.decode_text(text_buf);
field_prompt__value.decode_text(text_buf);
}

struct ASP__SSH__SetRegexPrompt_template::single_value_struct {
CHARSTRING_template field_prompt__name;
CHARSTRING_template field_prompt__value;
};

void ASP__SSH__SetRegexPrompt_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_prompt__name = ANY_VALUE;
single_value->field_prompt__value = ANY_VALUE;
}
}
}

void ASP__SSH__SetRegexPrompt_template::copy_value(const ASP__SSH__SetRegexPrompt& other_value)
{
single_value = new single_value_struct;
if (other_value.prompt__name().is_bound()) {
  single_value->field_prompt__name = other_value.prompt__name();
} else {
  single_value->field_prompt__name.clean_up();
}
if (other_value.prompt__value().is_bound()) {
  single_value->field_prompt__value = other_value.prompt__value();
} else {
  single_value->field_prompt__value.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__SetRegexPrompt_template::copy_template(const ASP__SSH__SetRegexPrompt_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.prompt__name().get_selection()) {
single_value->field_prompt__name = other_value.prompt__name();
} else {
single_value->field_prompt__name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.prompt__value().get_selection()) {
single_value->field_prompt__value = other_value.prompt__value();
} else {
single_value->field_prompt__value.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__SetRegexPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
break;
}
set_selection(other_value);
}

ASP__SSH__SetRegexPrompt_template::ASP__SSH__SetRegexPrompt_template()
{
}

ASP__SSH__SetRegexPrompt_template::ASP__SSH__SetRegexPrompt_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__SetRegexPrompt_template::ASP__SSH__SetRegexPrompt_template(const ASP__SSH__SetRegexPrompt& other_value)
{
copy_value(other_value);
}

ASP__SSH__SetRegexPrompt_template::ASP__SSH__SetRegexPrompt_template(const OPTIONAL<ASP__SSH__SetRegexPrompt>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetRegexPrompt&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt from an unbound optional field.");
}
}

ASP__SSH__SetRegexPrompt_template::ASP__SSH__SetRegexPrompt_template(const ASP__SSH__SetRegexPrompt_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__SetRegexPrompt_template::~ASP__SSH__SetRegexPrompt_template()
{
clean_up();
}

ASP__SSH__SetRegexPrompt_template& ASP__SSH__SetRegexPrompt_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__SetRegexPrompt_template& ASP__SSH__SetRegexPrompt_template::operator=(const ASP__SSH__SetRegexPrompt& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__SetRegexPrompt_template& ASP__SSH__SetRegexPrompt_template::operator=(const OPTIONAL<ASP__SSH__SetRegexPrompt>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetRegexPrompt&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
}
return *this;
}

ASP__SSH__SetRegexPrompt_template& ASP__SSH__SetRegexPrompt_template::operator=(const ASP__SSH__SetRegexPrompt_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__SetRegexPrompt_template::match(const ASP__SSH__SetRegexPrompt& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.prompt__name().is_bound()) return FALSE;
if(!single_value->field_prompt__name.match(other_value.prompt__name(), legacy))return FALSE;
if(!other_value.prompt__value().is_bound()) return FALSE;
if(!single_value->field_prompt__value.match(other_value.prompt__value(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
}
return FALSE;
}

boolean ASP__SSH__SetRegexPrompt_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_prompt__name.is_bound()) return TRUE;
if (single_value->field_prompt__value.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__SetRegexPrompt_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_prompt__name.is_value()) return FALSE;
if (!single_value->field_prompt__value.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__SetRegexPrompt_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__SetRegexPrompt ASP__SSH__SetRegexPrompt_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
ASP__SSH__SetRegexPrompt ret_val;
if (single_value->field_prompt__name.is_bound()) {
ret_val.prompt__name() = single_value->field_prompt__name.valueof();
}
if (single_value->field_prompt__value.is_bound()) {
ret_val.prompt__value() = single_value->field_prompt__value.valueof();
}
return ret_val;
}

void ASP__SSH__SetRegexPrompt_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__SetRegexPrompt_template[list_length];
}

ASP__SSH__SetRegexPrompt_template& ASP__SSH__SetRegexPrompt_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ASP__SSH__SetRegexPrompt_template::prompt__name()
{
set_specific();
return single_value->field_prompt__name;
}

const CHARSTRING_template& ASP__SSH__SetRegexPrompt_template::prompt__name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field prompt_name of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
return single_value->field_prompt__name;
}

CHARSTRING_template& ASP__SSH__SetRegexPrompt_template::prompt__value()
{
set_specific();
return single_value->field_prompt__value;
}

const CHARSTRING_template& ASP__SSH__SetRegexPrompt_template::prompt__value() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field prompt_value of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
return single_value->field_prompt__value;
}

int ASP__SSH__SetRegexPrompt_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
  }
  return 0;
}

void ASP__SSH__SetRegexPrompt_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ prompt_name := ");
single_value->field_prompt__name.log();
TTCN_Logger::log_event_str(", prompt_value := ");
single_value->field_prompt__value.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__SetRegexPrompt_template::log_match(const ASP__SSH__SetRegexPrompt& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_prompt__name.match(match_value.prompt__name(), legacy)){
TTCN_Logger::log_logmatch_info(".prompt_name");
single_value->field_prompt__name.log_match(match_value.prompt__name(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_prompt__value.match(match_value.prompt__value(), legacy)){
TTCN_Logger::log_logmatch_info(".prompt_value");
single_value->field_prompt__value.log_match(match_value.prompt__value(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ prompt_name := ");
single_value->field_prompt__name.log_match(match_value.prompt__name(), legacy);
TTCN_Logger::log_event_str(", prompt_value := ");
single_value->field_prompt__value.log_match(match_value.prompt__value(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__SetRegexPrompt_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_prompt__name.encode_text(text_buf);
single_value->field_prompt__value.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
}
}

void ASP__SSH__SetRegexPrompt_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_prompt__name.decode_text(text_buf);
single_value->field_prompt__value.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__SetRegexPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt.");
}
}

void ASP__SSH__SetRegexPrompt_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__SetRegexPrompt_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) prompt__name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) prompt__value().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__name().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "prompt_value")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          prompt__value().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__SetRegexPrompt_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_prompt__name.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt");
single_value->field_prompt__value.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetRegexPrompt");
}

boolean ASP__SSH__SetRegexPrompt_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__SetRegexPrompt_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__ClearPrompt::ASP__SSH__ClearPrompt()
{
bound_flag = FALSE;
}

ASP__SSH__ClearPrompt::ASP__SSH__ClearPrompt(null_type)
{
bound_flag = TRUE;
}

ASP__SSH__ClearPrompt::ASP__SSH__ClearPrompt(const ASP__SSH__ClearPrompt& other_value)
{
other_value.must_bound("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
bound_flag = TRUE;
}

ASP__SSH__ClearPrompt& ASP__SSH__ClearPrompt::operator=(null_type)
{
bound_flag = TRUE;
return *this;
}

ASP__SSH__ClearPrompt& ASP__SSH__ClearPrompt::operator=(const ASP__SSH__ClearPrompt& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
bound_flag = TRUE;
return *this;
}

boolean ASP__SSH__ClearPrompt::operator==(null_type) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
return TRUE;
}

boolean ASP__SSH__ClearPrompt::operator==(const ASP__SSH__ClearPrompt& other_value) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
return TRUE;
}

void ASP__SSH__ClearPrompt::log() const
{
if (bound_flag) TTCN_Logger::log_event_str("{ }");
else TTCN_Logger::log_event_unbound();
}

void ASP__SSH__ClearPrompt::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "empty record/set value (i.e. { })");
  if (param.get_type()!=Module_Param::MP_Value_List || param.get_size()>0) {
    param.type_error("empty record/set value (i.e. { })", "@SSHCLIENTasp_Types.ASP_SSH_ClearPrompt");
  }
  bound_flag = TRUE;
}

void ASP__SSH__ClearPrompt::encode_text(Text_Buf& /*text_buf*/) const
{
must_bound("Text encoder: Encoding an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
}

void ASP__SSH__ClearPrompt::decode_text(Text_Buf& /*text_buf*/)
{
bound_flag = TRUE;
}

void ASP__SSH__ClearPrompt_template::copy_template(const ASP__SSH__ClearPrompt_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__ClearPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
break;
}
}

ASP__SSH__ClearPrompt_template::ASP__SSH__ClearPrompt_template()
{
}

ASP__SSH__ClearPrompt_template::ASP__SSH__ClearPrompt_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__ClearPrompt_template::ASP__SSH__ClearPrompt_template(null_type)
 : Base_Template(SPECIFIC_VALUE)
{
}

ASP__SSH__ClearPrompt_template::ASP__SSH__ClearPrompt_template(const ASP__SSH__ClearPrompt& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
}

ASP__SSH__ClearPrompt_template::ASP__SSH__ClearPrompt_template(const OPTIONAL<ASP__SSH__ClearPrompt>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt from an unbound optional field.");
}
}

ASP__SSH__ClearPrompt_template::ASP__SSH__ClearPrompt_template(const ASP__SSH__ClearPrompt_template& other_value)
: Base_Template(){
copy_template(other_value);
}

ASP__SSH__ClearPrompt_template::~ASP__SSH__ClearPrompt_template()
{
clean_up();
}

void ASP__SSH__ClearPrompt_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST)
delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__ClearPrompt_template& ASP__SSH__ClearPrompt_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__ClearPrompt_template& ASP__SSH__ClearPrompt_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__ClearPrompt_template& ASP__SSH__ClearPrompt_template::operator=(const ASP__SSH__ClearPrompt& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__ClearPrompt_template& ASP__SSH__ClearPrompt_template::operator=(const OPTIONAL<ASP__SSH__ClearPrompt>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
}
return *this;
}

ASP__SSH__ClearPrompt_template& ASP__SSH__ClearPrompt_template::operator=(const ASP__SSH__ClearPrompt_template& other_value)
{
if (&other_value != this) {
clean_up();
set_selection(other_value);
}
return *this;
}

boolean ASP__SSH__ClearPrompt_template::match(null_type other_value,boolean) const
{
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
return TRUE;
case OMIT_VALUE:
return FALSE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
}
return FALSE;
}

boolean ASP__SSH__ClearPrompt_template::match(const ASP__SSH__ClearPrompt& other_value, boolean) const
{
if (!other_value.is_bound()) return FALSE;
return match(NULL_VALUE);
}

ASP__SSH__ClearPrompt ASP__SSH__ClearPrompt_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
return NULL_VALUE;
}

void ASP__SSH__ClearPrompt_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__ClearPrompt_template[list_length];
}

ASP__SSH__ClearPrompt_template& ASP__SSH__ClearPrompt_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
return value_list.list_value[list_index];
}

void ASP__SSH__ClearPrompt_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__ClearPrompt_template::log_match(const ASP__SSH__ClearPrompt& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void ASP__SSH__ClearPrompt_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
}
}

void ASP__SSH__ClearPrompt_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__ClearPrompt_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
}
}

void ASP__SSH__ClearPrompt_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "empty record/set template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__ClearPrompt_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (param.get_size()>0) param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_ClearPrompt");
    *this = NULL_VALUE;
    break;
  default:
    param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_ClearPrompt");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__ClearPrompt_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_ClearPrompt");
}

boolean ASP__SSH__ClearPrompt_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__ClearPrompt_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__SetMode::ASP__SSH__SetMode()
{
}

ASP__SSH__SetMode::ASP__SSH__SetMode(const INTEGER& par_readmode)
  :   field_readmode(par_readmode)
{
}

ASP__SSH__SetMode::ASP__SSH__SetMode(const ASP__SSH__SetMode& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
if (other_value.readmode().is_bound()) field_readmode = other_value.readmode();
else field_readmode.clean_up();
}

void ASP__SSH__SetMode::clean_up()
{
field_readmode.clean_up();
}

ASP__SSH__SetMode& ASP__SSH__SetMode::operator=(const ASP__SSH__SetMode& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
  if (other_value.readmode().is_bound()) field_readmode = other_value.readmode();
  else field_readmode.clean_up();
}
return *this;
}

boolean ASP__SSH__SetMode::operator==(const ASP__SSH__SetMode& other_value) const
{
return field_readmode==other_value.field_readmode;
}

boolean ASP__SSH__SetMode::is_bound() const
{
if(field_readmode.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__SetMode::is_value() const
{
if(!field_readmode.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__SetMode::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ readmode := ");
field_readmode.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__SetMode::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_SetMode has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) readmode().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "readmode")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          readmode().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetMode: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_SetMode");
  }
}

void ASP__SSH__SetMode::set_implicit_omit()
{
if (readmode().is_bound()) readmode().set_implicit_omit();
}

void ASP__SSH__SetMode::encode_text(Text_Buf& text_buf) const
{
field_readmode.encode_text(text_buf);
}

void ASP__SSH__SetMode::decode_text(Text_Buf& text_buf)
{
field_readmode.decode_text(text_buf);
}

struct ASP__SSH__SetMode_template::single_value_struct {
INTEGER_template field_readmode;
};

void ASP__SSH__SetMode_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_readmode = ANY_VALUE;
}
}
}

void ASP__SSH__SetMode_template::copy_value(const ASP__SSH__SetMode& other_value)
{
single_value = new single_value_struct;
if (other_value.readmode().is_bound()) {
  single_value->field_readmode = other_value.readmode();
} else {
  single_value->field_readmode.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__SetMode_template::copy_template(const ASP__SSH__SetMode_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.readmode().get_selection()) {
single_value->field_readmode = other_value.readmode();
} else {
single_value->field_readmode.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__SetMode_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
break;
}
set_selection(other_value);
}

ASP__SSH__SetMode_template::ASP__SSH__SetMode_template()
{
}

ASP__SSH__SetMode_template::ASP__SSH__SetMode_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__SetMode_template::ASP__SSH__SetMode_template(const ASP__SSH__SetMode& other_value)
{
copy_value(other_value);
}

ASP__SSH__SetMode_template::ASP__SSH__SetMode_template(const OPTIONAL<ASP__SSH__SetMode>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetMode&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode from an unbound optional field.");
}
}

ASP__SSH__SetMode_template::ASP__SSH__SetMode_template(const ASP__SSH__SetMode_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__SetMode_template::~ASP__SSH__SetMode_template()
{
clean_up();
}

ASP__SSH__SetMode_template& ASP__SSH__SetMode_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__SetMode_template& ASP__SSH__SetMode_template::operator=(const ASP__SSH__SetMode& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__SetMode_template& ASP__SSH__SetMode_template::operator=(const OPTIONAL<ASP__SSH__SetMode>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetMode&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
}
return *this;
}

ASP__SSH__SetMode_template& ASP__SSH__SetMode_template::operator=(const ASP__SSH__SetMode_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__SetMode_template::match(const ASP__SSH__SetMode& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.readmode().is_bound()) return FALSE;
if(!single_value->field_readmode.match(other_value.readmode(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
}
return FALSE;
}

boolean ASP__SSH__SetMode_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_readmode.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__SetMode_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_readmode.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__SetMode_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__SetMode ASP__SSH__SetMode_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
ASP__SSH__SetMode ret_val;
if (single_value->field_readmode.is_bound()) {
ret_val.readmode() = single_value->field_readmode.valueof();
}
return ret_val;
}

void ASP__SSH__SetMode_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__SetMode_template[list_length];
}

ASP__SSH__SetMode_template& ASP__SSH__SetMode_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
return value_list.list_value[list_index];
}

INTEGER_template& ASP__SSH__SetMode_template::readmode()
{
set_specific();
return single_value->field_readmode;
}

const INTEGER_template& ASP__SSH__SetMode_template::readmode() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field readmode of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
return single_value->field_readmode;
}

int ASP__SSH__SetMode_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
  }
  return 0;
}

void ASP__SSH__SetMode_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ readmode := ");
single_value->field_readmode.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__SetMode_template::log_match(const ASP__SSH__SetMode& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_readmode.match(match_value.readmode(), legacy)){
TTCN_Logger::log_logmatch_info(".readmode");
single_value->field_readmode.log_match(match_value.readmode(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ readmode := ");
single_value->field_readmode.log_match(match_value.readmode(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__SetMode_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_readmode.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
}
}

void ASP__SSH__SetMode_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_readmode.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__SetMode_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode.");
}
}

void ASP__SSH__SetMode_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__SetMode_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_SetMode has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) readmode().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "readmode")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          readmode().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetMode: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_SetMode");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__SetMode_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_readmode.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetMode");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetMode");
}

boolean ASP__SSH__SetMode_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__SetMode_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__Connect::ASP__SSH__Connect()
{
bound_flag = FALSE;
}

ASP__SSH__Connect::ASP__SSH__Connect(null_type)
{
bound_flag = TRUE;
}

ASP__SSH__Connect::ASP__SSH__Connect(const ASP__SSH__Connect& other_value)
{
other_value.must_bound("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
bound_flag = TRUE;
}

ASP__SSH__Connect& ASP__SSH__Connect::operator=(null_type)
{
bound_flag = TRUE;
return *this;
}

ASP__SSH__Connect& ASP__SSH__Connect::operator=(const ASP__SSH__Connect& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
bound_flag = TRUE;
return *this;
}

boolean ASP__SSH__Connect::operator==(null_type) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
return TRUE;
}

boolean ASP__SSH__Connect::operator==(const ASP__SSH__Connect& other_value) const
{
must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
return TRUE;
}

void ASP__SSH__Connect::log() const
{
if (bound_flag) TTCN_Logger::log_event_str("{ }");
else TTCN_Logger::log_event_unbound();
}

void ASP__SSH__Connect::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "empty record/set value (i.e. { })");
  if (param.get_type()!=Module_Param::MP_Value_List || param.get_size()>0) {
    param.type_error("empty record/set value (i.e. { })", "@SSHCLIENTasp_Types.ASP_SSH_Connect");
  }
  bound_flag = TRUE;
}

void ASP__SSH__Connect::encode_text(Text_Buf& /*text_buf*/) const
{
must_bound("Text encoder: Encoding an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
}

void ASP__SSH__Connect::decode_text(Text_Buf& /*text_buf*/)
{
bound_flag = TRUE;
}

void ASP__SSH__Connect_template::copy_template(const ASP__SSH__Connect_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__Connect_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
break;
}
}

ASP__SSH__Connect_template::ASP__SSH__Connect_template()
{
}

ASP__SSH__Connect_template::ASP__SSH__Connect_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__Connect_template::ASP__SSH__Connect_template(null_type)
 : Base_Template(SPECIFIC_VALUE)
{
}

ASP__SSH__Connect_template::ASP__SSH__Connect_template(const ASP__SSH__Connect& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
}

ASP__SSH__Connect_template::ASP__SSH__Connect_template(const OPTIONAL<ASP__SSH__Connect>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_Connect from an unbound optional field.");
}
}

ASP__SSH__Connect_template::ASP__SSH__Connect_template(const ASP__SSH__Connect_template& other_value)
: Base_Template(){
copy_template(other_value);
}

ASP__SSH__Connect_template::~ASP__SSH__Connect_template()
{
clean_up();
}

void ASP__SSH__Connect_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST)
delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__Connect_template& ASP__SSH__Connect_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__Connect_template& ASP__SSH__Connect_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__Connect_template& ASP__SSH__Connect_template::operator=(const ASP__SSH__Connect& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

ASP__SSH__Connect_template& ASP__SSH__Connect_template::operator=(const OPTIONAL<ASP__SSH__Connect>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
}
return *this;
}

ASP__SSH__Connect_template& ASP__SSH__Connect_template::operator=(const ASP__SSH__Connect_template& other_value)
{
if (&other_value != this) {
clean_up();
set_selection(other_value);
}
return *this;
}

boolean ASP__SSH__Connect_template::match(null_type other_value,boolean) const
{
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
return TRUE;
case OMIT_VALUE:
return FALSE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
}
return FALSE;
}

boolean ASP__SSH__Connect_template::match(const ASP__SSH__Connect& other_value, boolean) const
{
if (!other_value.is_bound()) return FALSE;
return match(NULL_VALUE);
}

ASP__SSH__Connect ASP__SSH__Connect_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
return NULL_VALUE;
}

void ASP__SSH__Connect_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__Connect_template[list_length];
}

ASP__SSH__Connect_template& ASP__SSH__Connect_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
return value_list.list_value[list_index];
}

void ASP__SSH__Connect_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__Connect_template::log_match(const ASP__SSH__Connect& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void ASP__SSH__Connect_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
}
}

void ASP__SSH__Connect_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__Connect_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
}
}

void ASP__SSH__Connect_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "empty record/set template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__Connect_template temp;
    temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (param.get_size()>0) param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_Connect");
    *this = NULL_VALUE;
    break;
  default:
    param.type_error("empty record/set template", "@SSHCLIENTasp_Types.ASP_SSH_Connect");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__Connect_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_Connect");
}

boolean ASP__SSH__Connect_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__Connect_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__SetUserID::ASP__SSH__SetUserID()
{
}

ASP__SSH__SetUserID::ASP__SSH__SetUserID(const CHARSTRING& par_usrid)
  :   field_usrid(par_usrid)
{
}

ASP__SSH__SetUserID::ASP__SSH__SetUserID(const ASP__SSH__SetUserID& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
if (other_value.usrid().is_bound()) field_usrid = other_value.usrid();
else field_usrid.clean_up();
}

void ASP__SSH__SetUserID::clean_up()
{
field_usrid.clean_up();
}

ASP__SSH__SetUserID& ASP__SSH__SetUserID::operator=(const ASP__SSH__SetUserID& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
  if (other_value.usrid().is_bound()) field_usrid = other_value.usrid();
  else field_usrid.clean_up();
}
return *this;
}

boolean ASP__SSH__SetUserID::operator==(const ASP__SSH__SetUserID& other_value) const
{
return field_usrid==other_value.field_usrid;
}

boolean ASP__SSH__SetUserID::is_bound() const
{
if(field_usrid.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__SetUserID::is_value() const
{
if(!field_usrid.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__SetUserID::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ usrid := ");
field_usrid.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__SetUserID::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) usrid().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "usrid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          usrid().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetUserID: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_SetUserID");
  }
}

void ASP__SSH__SetUserID::set_implicit_omit()
{
if (usrid().is_bound()) usrid().set_implicit_omit();
}

void ASP__SSH__SetUserID::encode_text(Text_Buf& text_buf) const
{
field_usrid.encode_text(text_buf);
}

void ASP__SSH__SetUserID::decode_text(Text_Buf& text_buf)
{
field_usrid.decode_text(text_buf);
}

struct ASP__SSH__SetUserID_template::single_value_struct {
CHARSTRING_template field_usrid;
};

void ASP__SSH__SetUserID_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_usrid = ANY_VALUE;
}
}
}

void ASP__SSH__SetUserID_template::copy_value(const ASP__SSH__SetUserID& other_value)
{
single_value = new single_value_struct;
if (other_value.usrid().is_bound()) {
  single_value->field_usrid = other_value.usrid();
} else {
  single_value->field_usrid.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__SetUserID_template::copy_template(const ASP__SSH__SetUserID_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.usrid().get_selection()) {
single_value->field_usrid = other_value.usrid();
} else {
single_value->field_usrid.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__SetUserID_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
break;
}
set_selection(other_value);
}

ASP__SSH__SetUserID_template::ASP__SSH__SetUserID_template()
{
}

ASP__SSH__SetUserID_template::ASP__SSH__SetUserID_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__SetUserID_template::ASP__SSH__SetUserID_template(const ASP__SSH__SetUserID& other_value)
{
copy_value(other_value);
}

ASP__SSH__SetUserID_template::ASP__SSH__SetUserID_template(const OPTIONAL<ASP__SSH__SetUserID>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetUserID&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID from an unbound optional field.");
}
}

ASP__SSH__SetUserID_template::ASP__SSH__SetUserID_template(const ASP__SSH__SetUserID_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__SetUserID_template::~ASP__SSH__SetUserID_template()
{
clean_up();
}

ASP__SSH__SetUserID_template& ASP__SSH__SetUserID_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__SetUserID_template& ASP__SSH__SetUserID_template::operator=(const ASP__SSH__SetUserID& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__SetUserID_template& ASP__SSH__SetUserID_template::operator=(const OPTIONAL<ASP__SSH__SetUserID>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetUserID&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
}
return *this;
}

ASP__SSH__SetUserID_template& ASP__SSH__SetUserID_template::operator=(const ASP__SSH__SetUserID_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__SetUserID_template::match(const ASP__SSH__SetUserID& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.usrid().is_bound()) return FALSE;
if(!single_value->field_usrid.match(other_value.usrid(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
}
return FALSE;
}

boolean ASP__SSH__SetUserID_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_usrid.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__SetUserID_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_usrid.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__SetUserID_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__SetUserID ASP__SSH__SetUserID_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
ASP__SSH__SetUserID ret_val;
if (single_value->field_usrid.is_bound()) {
ret_val.usrid() = single_value->field_usrid.valueof();
}
return ret_val;
}

void ASP__SSH__SetUserID_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__SetUserID_template[list_length];
}

ASP__SSH__SetUserID_template& ASP__SSH__SetUserID_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ASP__SSH__SetUserID_template::usrid()
{
set_specific();
return single_value->field_usrid;
}

const CHARSTRING_template& ASP__SSH__SetUserID_template::usrid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field usrid of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
return single_value->field_usrid;
}

int ASP__SSH__SetUserID_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
  }
  return 0;
}

void ASP__SSH__SetUserID_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ usrid := ");
single_value->field_usrid.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__SetUserID_template::log_match(const ASP__SSH__SetUserID& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_usrid.match(match_value.usrid(), legacy)){
TTCN_Logger::log_logmatch_info(".usrid");
single_value->field_usrid.log_match(match_value.usrid(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ usrid := ");
single_value->field_usrid.log_match(match_value.usrid(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__SetUserID_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_usrid.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
}
}

void ASP__SSH__SetUserID_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_usrid.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__SetUserID_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID.");
}
}

void ASP__SSH__SetUserID_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__SetUserID_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_SetUserID has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) usrid().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "usrid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          usrid().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetUserID: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_SetUserID");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__SetUserID_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_usrid.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetUserID");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetUserID");
}

boolean ASP__SSH__SetUserID_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__SetUserID_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__SetRemoteHost::ASP__SSH__SetRemoteHost()
{
}

ASP__SSH__SetRemoteHost::ASP__SSH__SetRemoteHost(const CHARSTRING& par_remotehost)
  :   field_remotehost(par_remotehost)
{
}

ASP__SSH__SetRemoteHost::ASP__SSH__SetRemoteHost(const ASP__SSH__SetRemoteHost& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
if (other_value.remotehost().is_bound()) field_remotehost = other_value.remotehost();
else field_remotehost.clean_up();
}

void ASP__SSH__SetRemoteHost::clean_up()
{
field_remotehost.clean_up();
}

ASP__SSH__SetRemoteHost& ASP__SSH__SetRemoteHost::operator=(const ASP__SSH__SetRemoteHost& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
  if (other_value.remotehost().is_bound()) field_remotehost = other_value.remotehost();
  else field_remotehost.clean_up();
}
return *this;
}

boolean ASP__SSH__SetRemoteHost::operator==(const ASP__SSH__SetRemoteHost& other_value) const
{
return field_remotehost==other_value.field_remotehost;
}

boolean ASP__SSH__SetRemoteHost::is_bound() const
{
if(field_remotehost.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__SetRemoteHost::is_value() const
{
if(!field_remotehost.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__SetRemoteHost::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ remotehost := ");
field_remotehost.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__SetRemoteHost::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) remotehost().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remotehost")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remotehost().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost");
  }
}

void ASP__SSH__SetRemoteHost::set_implicit_omit()
{
if (remotehost().is_bound()) remotehost().set_implicit_omit();
}

void ASP__SSH__SetRemoteHost::encode_text(Text_Buf& text_buf) const
{
field_remotehost.encode_text(text_buf);
}

void ASP__SSH__SetRemoteHost::decode_text(Text_Buf& text_buf)
{
field_remotehost.decode_text(text_buf);
}

struct ASP__SSH__SetRemoteHost_template::single_value_struct {
CHARSTRING_template field_remotehost;
};

void ASP__SSH__SetRemoteHost_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_remotehost = ANY_VALUE;
}
}
}

void ASP__SSH__SetRemoteHost_template::copy_value(const ASP__SSH__SetRemoteHost& other_value)
{
single_value = new single_value_struct;
if (other_value.remotehost().is_bound()) {
  single_value->field_remotehost = other_value.remotehost();
} else {
  single_value->field_remotehost.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__SetRemoteHost_template::copy_template(const ASP__SSH__SetRemoteHost_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.remotehost().get_selection()) {
single_value->field_remotehost = other_value.remotehost();
} else {
single_value->field_remotehost.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__SetRemoteHost_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
break;
}
set_selection(other_value);
}

ASP__SSH__SetRemoteHost_template::ASP__SSH__SetRemoteHost_template()
{
}

ASP__SSH__SetRemoteHost_template::ASP__SSH__SetRemoteHost_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__SetRemoteHost_template::ASP__SSH__SetRemoteHost_template(const ASP__SSH__SetRemoteHost& other_value)
{
copy_value(other_value);
}

ASP__SSH__SetRemoteHost_template::ASP__SSH__SetRemoteHost_template(const OPTIONAL<ASP__SSH__SetRemoteHost>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetRemoteHost&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost from an unbound optional field.");
}
}

ASP__SSH__SetRemoteHost_template::ASP__SSH__SetRemoteHost_template(const ASP__SSH__SetRemoteHost_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__SetRemoteHost_template::~ASP__SSH__SetRemoteHost_template()
{
clean_up();
}

ASP__SSH__SetRemoteHost_template& ASP__SSH__SetRemoteHost_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__SetRemoteHost_template& ASP__SSH__SetRemoteHost_template::operator=(const ASP__SSH__SetRemoteHost& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__SetRemoteHost_template& ASP__SSH__SetRemoteHost_template::operator=(const OPTIONAL<ASP__SSH__SetRemoteHost>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetRemoteHost&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
}
return *this;
}

ASP__SSH__SetRemoteHost_template& ASP__SSH__SetRemoteHost_template::operator=(const ASP__SSH__SetRemoteHost_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__SetRemoteHost_template::match(const ASP__SSH__SetRemoteHost& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.remotehost().is_bound()) return FALSE;
if(!single_value->field_remotehost.match(other_value.remotehost(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
}
return FALSE;
}

boolean ASP__SSH__SetRemoteHost_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_remotehost.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__SetRemoteHost_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_remotehost.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__SetRemoteHost_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__SetRemoteHost ASP__SSH__SetRemoteHost_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
ASP__SSH__SetRemoteHost ret_val;
if (single_value->field_remotehost.is_bound()) {
ret_val.remotehost() = single_value->field_remotehost.valueof();
}
return ret_val;
}

void ASP__SSH__SetRemoteHost_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__SetRemoteHost_template[list_length];
}

ASP__SSH__SetRemoteHost_template& ASP__SSH__SetRemoteHost_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ASP__SSH__SetRemoteHost_template::remotehost()
{
set_specific();
return single_value->field_remotehost;
}

const CHARSTRING_template& ASP__SSH__SetRemoteHost_template::remotehost() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field remotehost of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
return single_value->field_remotehost;
}

int ASP__SSH__SetRemoteHost_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
  }
  return 0;
}

void ASP__SSH__SetRemoteHost_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ remotehost := ");
single_value->field_remotehost.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__SetRemoteHost_template::log_match(const ASP__SSH__SetRemoteHost& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_remotehost.match(match_value.remotehost(), legacy)){
TTCN_Logger::log_logmatch_info(".remotehost");
single_value->field_remotehost.log_match(match_value.remotehost(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ remotehost := ");
single_value->field_remotehost.log_match(match_value.remotehost(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__SetRemoteHost_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_remotehost.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
}
}

void ASP__SSH__SetRemoteHost_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_remotehost.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__SetRemoteHost_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost.");
}
}

void ASP__SSH__SetRemoteHost_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__SetRemoteHost_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) remotehost().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remotehost")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remotehost().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__SetRemoteHost_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_remotehost.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetRemoteHost");
}

boolean ASP__SSH__SetRemoteHost_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__SetRemoteHost_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__SetRemotePort::ASP__SSH__SetRemotePort()
{
}

ASP__SSH__SetRemotePort::ASP__SSH__SetRemotePort(const CHARSTRING& par_remoteport)
  :   field_remoteport(par_remoteport)
{
}

ASP__SSH__SetRemotePort::ASP__SSH__SetRemotePort(const ASP__SSH__SetRemotePort& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
if (other_value.remoteport().is_bound()) field_remoteport = other_value.remoteport();
else field_remoteport.clean_up();
}

void ASP__SSH__SetRemotePort::clean_up()
{
field_remoteport.clean_up();
}

ASP__SSH__SetRemotePort& ASP__SSH__SetRemotePort::operator=(const ASP__SSH__SetRemotePort& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
  if (other_value.remoteport().is_bound()) field_remoteport = other_value.remoteport();
  else field_remoteport.clean_up();
}
return *this;
}

boolean ASP__SSH__SetRemotePort::operator==(const ASP__SSH__SetRemotePort& other_value) const
{
return field_remoteport==other_value.field_remoteport;
}

boolean ASP__SSH__SetRemotePort::is_bound() const
{
if(field_remoteport.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__SetRemotePort::is_value() const
{
if(!field_remoteport.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__SetRemotePort::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ remoteport := ");
field_remoteport.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__SetRemotePort::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) remoteport().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remoteport")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remoteport().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_SetRemotePort");
  }
}

void ASP__SSH__SetRemotePort::set_implicit_omit()
{
if (remoteport().is_bound()) remoteport().set_implicit_omit();
}

void ASP__SSH__SetRemotePort::encode_text(Text_Buf& text_buf) const
{
field_remoteport.encode_text(text_buf);
}

void ASP__SSH__SetRemotePort::decode_text(Text_Buf& text_buf)
{
field_remoteport.decode_text(text_buf);
}

struct ASP__SSH__SetRemotePort_template::single_value_struct {
CHARSTRING_template field_remoteport;
};

void ASP__SSH__SetRemotePort_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_remoteport = ANY_VALUE;
}
}
}

void ASP__SSH__SetRemotePort_template::copy_value(const ASP__SSH__SetRemotePort& other_value)
{
single_value = new single_value_struct;
if (other_value.remoteport().is_bound()) {
  single_value->field_remoteport = other_value.remoteport();
} else {
  single_value->field_remoteport.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__SetRemotePort_template::copy_template(const ASP__SSH__SetRemotePort_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.remoteport().get_selection()) {
single_value->field_remoteport = other_value.remoteport();
} else {
single_value->field_remoteport.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__SetRemotePort_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
break;
}
set_selection(other_value);
}

ASP__SSH__SetRemotePort_template::ASP__SSH__SetRemotePort_template()
{
}

ASP__SSH__SetRemotePort_template::ASP__SSH__SetRemotePort_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__SetRemotePort_template::ASP__SSH__SetRemotePort_template(const ASP__SSH__SetRemotePort& other_value)
{
copy_value(other_value);
}

ASP__SSH__SetRemotePort_template::ASP__SSH__SetRemotePort_template(const OPTIONAL<ASP__SSH__SetRemotePort>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetRemotePort&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort from an unbound optional field.");
}
}

ASP__SSH__SetRemotePort_template::ASP__SSH__SetRemotePort_template(const ASP__SSH__SetRemotePort_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__SetRemotePort_template::~ASP__SSH__SetRemotePort_template()
{
clean_up();
}

ASP__SSH__SetRemotePort_template& ASP__SSH__SetRemotePort_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__SetRemotePort_template& ASP__SSH__SetRemotePort_template::operator=(const ASP__SSH__SetRemotePort& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__SetRemotePort_template& ASP__SSH__SetRemotePort_template::operator=(const OPTIONAL<ASP__SSH__SetRemotePort>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetRemotePort&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
}
return *this;
}

ASP__SSH__SetRemotePort_template& ASP__SSH__SetRemotePort_template::operator=(const ASP__SSH__SetRemotePort_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__SetRemotePort_template::match(const ASP__SSH__SetRemotePort& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.remoteport().is_bound()) return FALSE;
if(!single_value->field_remoteport.match(other_value.remoteport(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
}
return FALSE;
}

boolean ASP__SSH__SetRemotePort_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_remoteport.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__SetRemotePort_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_remoteport.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__SetRemotePort_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__SetRemotePort ASP__SSH__SetRemotePort_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
ASP__SSH__SetRemotePort ret_val;
if (single_value->field_remoteport.is_bound()) {
ret_val.remoteport() = single_value->field_remoteport.valueof();
}
return ret_val;
}

void ASP__SSH__SetRemotePort_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__SetRemotePort_template[list_length];
}

ASP__SSH__SetRemotePort_template& ASP__SSH__SetRemotePort_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ASP__SSH__SetRemotePort_template::remoteport()
{
set_specific();
return single_value->field_remoteport;
}

const CHARSTRING_template& ASP__SSH__SetRemotePort_template::remoteport() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field remoteport of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
return single_value->field_remoteport;
}

int ASP__SSH__SetRemotePort_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
  }
  return 0;
}

void ASP__SSH__SetRemotePort_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ remoteport := ");
single_value->field_remoteport.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__SetRemotePort_template::log_match(const ASP__SSH__SetRemotePort& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_remoteport.match(match_value.remoteport(), legacy)){
TTCN_Logger::log_logmatch_info(".remoteport");
single_value->field_remoteport.log_match(match_value.remoteport(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ remoteport := ");
single_value->field_remoteport.log_match(match_value.remoteport(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__SetRemotePort_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_remoteport.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
}
}

void ASP__SSH__SetRemotePort_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_remoteport.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__SetRemotePort_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort.");
}
}

void ASP__SSH__SetRemotePort_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__SetRemotePort_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) remoteport().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "remoteport")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          remoteport().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetRemotePort: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_SetRemotePort");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__SetRemotePort_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_remoteport.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetRemotePort");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetRemotePort");
}

boolean ASP__SSH__SetRemotePort_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__SetRemotePort_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

ASP__SSH__SetAdditionalParameters::ASP__SSH__SetAdditionalParameters()
{
}

ASP__SSH__SetAdditionalParameters::ASP__SSH__SetAdditionalParameters(const CHARSTRING& par_additionalparameters)
  :   field_additionalparameters(par_additionalparameters)
{
}

ASP__SSH__SetAdditionalParameters::ASP__SSH__SetAdditionalParameters(const ASP__SSH__SetAdditionalParameters& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
if (other_value.additionalparameters().is_bound()) field_additionalparameters = other_value.additionalparameters();
else field_additionalparameters.clean_up();
}

void ASP__SSH__SetAdditionalParameters::clean_up()
{
field_additionalparameters.clean_up();
}

ASP__SSH__SetAdditionalParameters& ASP__SSH__SetAdditionalParameters::operator=(const ASP__SSH__SetAdditionalParameters& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
  if (other_value.additionalparameters().is_bound()) field_additionalparameters = other_value.additionalparameters();
  else field_additionalparameters.clean_up();
}
return *this;
}

boolean ASP__SSH__SetAdditionalParameters::operator==(const ASP__SSH__SetAdditionalParameters& other_value) const
{
return field_additionalparameters==other_value.field_additionalparameters;
}

boolean ASP__SSH__SetAdditionalParameters::is_bound() const
{
if(field_additionalparameters.is_bound()) return TRUE;
return FALSE;
}
boolean ASP__SSH__SetAdditionalParameters::is_value() const
{
if(!field_additionalparameters.is_value()) return FALSE;
return TRUE;
}
void ASP__SSH__SetAdditionalParameters::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ additionalparameters := ");
field_additionalparameters.log();
TTCN_Logger::log_event_str(" }");
}

void ASP__SSH__SetAdditionalParameters::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) additionalparameters().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "additionalparameters")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          additionalparameters().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters");
  }
}

void ASP__SSH__SetAdditionalParameters::set_implicit_omit()
{
if (additionalparameters().is_bound()) additionalparameters().set_implicit_omit();
}

void ASP__SSH__SetAdditionalParameters::encode_text(Text_Buf& text_buf) const
{
field_additionalparameters.encode_text(text_buf);
}

void ASP__SSH__SetAdditionalParameters::decode_text(Text_Buf& text_buf)
{
field_additionalparameters.decode_text(text_buf);
}

struct ASP__SSH__SetAdditionalParameters_template::single_value_struct {
CHARSTRING_template field_additionalparameters;
};

void ASP__SSH__SetAdditionalParameters_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_additionalparameters = ANY_VALUE;
}
}
}

void ASP__SSH__SetAdditionalParameters_template::copy_value(const ASP__SSH__SetAdditionalParameters& other_value)
{
single_value = new single_value_struct;
if (other_value.additionalparameters().is_bound()) {
  single_value->field_additionalparameters = other_value.additionalparameters();
} else {
  single_value->field_additionalparameters.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ASP__SSH__SetAdditionalParameters_template::copy_template(const ASP__SSH__SetAdditionalParameters_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.additionalparameters().get_selection()) {
single_value->field_additionalparameters = other_value.additionalparameters();
} else {
single_value->field_additionalparameters.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ASP__SSH__SetAdditionalParameters_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
break;
}
set_selection(other_value);
}

ASP__SSH__SetAdditionalParameters_template::ASP__SSH__SetAdditionalParameters_template()
{
}

ASP__SSH__SetAdditionalParameters_template::ASP__SSH__SetAdditionalParameters_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ASP__SSH__SetAdditionalParameters_template::ASP__SSH__SetAdditionalParameters_template(const ASP__SSH__SetAdditionalParameters& other_value)
{
copy_value(other_value);
}

ASP__SSH__SetAdditionalParameters_template::ASP__SSH__SetAdditionalParameters_template(const OPTIONAL<ASP__SSH__SetAdditionalParameters>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetAdditionalParameters&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters from an unbound optional field.");
}
}

ASP__SSH__SetAdditionalParameters_template::ASP__SSH__SetAdditionalParameters_template(const ASP__SSH__SetAdditionalParameters_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ASP__SSH__SetAdditionalParameters_template::~ASP__SSH__SetAdditionalParameters_template()
{
clean_up();
}

ASP__SSH__SetAdditionalParameters_template& ASP__SSH__SetAdditionalParameters_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ASP__SSH__SetAdditionalParameters_template& ASP__SSH__SetAdditionalParameters_template::operator=(const ASP__SSH__SetAdditionalParameters& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ASP__SSH__SetAdditionalParameters_template& ASP__SSH__SetAdditionalParameters_template::operator=(const OPTIONAL<ASP__SSH__SetAdditionalParameters>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ASP__SSH__SetAdditionalParameters&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
}
return *this;
}

ASP__SSH__SetAdditionalParameters_template& ASP__SSH__SetAdditionalParameters_template::operator=(const ASP__SSH__SetAdditionalParameters_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ASP__SSH__SetAdditionalParameters_template::match(const ASP__SSH__SetAdditionalParameters& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.additionalparameters().is_bound()) return FALSE;
if(!single_value->field_additionalparameters.match(other_value.additionalparameters(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
}
return FALSE;
}

boolean ASP__SSH__SetAdditionalParameters_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_additionalparameters.is_bound()) return TRUE;
return FALSE;
}

boolean ASP__SSH__SetAdditionalParameters_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_additionalparameters.is_value()) return FALSE;
return TRUE;
}

void ASP__SSH__SetAdditionalParameters_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ASP__SSH__SetAdditionalParameters ASP__SSH__SetAdditionalParameters_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
ASP__SSH__SetAdditionalParameters ret_val;
if (single_value->field_additionalparameters.is_bound()) {
ret_val.additionalparameters() = single_value->field_additionalparameters.valueof();
}
return ret_val;
}

void ASP__SSH__SetAdditionalParameters_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ASP__SSH__SetAdditionalParameters_template[list_length];
}

ASP__SSH__SetAdditionalParameters_template& ASP__SSH__SetAdditionalParameters_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ASP__SSH__SetAdditionalParameters_template::additionalparameters()
{
set_specific();
return single_value->field_additionalparameters;
}

const CHARSTRING_template& ASP__SSH__SetAdditionalParameters_template::additionalparameters() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field additionalparameters of a non-specific template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
return single_value->field_additionalparameters;
}

int ASP__SSH__SetAdditionalParameters_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
  }
  return 0;
}

void ASP__SSH__SetAdditionalParameters_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ additionalparameters := ");
single_value->field_additionalparameters.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ASP__SSH__SetAdditionalParameters_template::log_match(const ASP__SSH__SetAdditionalParameters& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_additionalparameters.match(match_value.additionalparameters(), legacy)){
TTCN_Logger::log_logmatch_info(".additionalparameters");
single_value->field_additionalparameters.log_match(match_value.additionalparameters(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ additionalparameters := ");
single_value->field_additionalparameters.log_match(match_value.additionalparameters(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ASP__SSH__SetAdditionalParameters_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_additionalparameters.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
}
}

void ASP__SSH__SetAdditionalParameters_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_additionalparameters.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ASP__SSH__SetAdditionalParameters_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters.");
}
}

void ASP__SSH__SetAdditionalParameters_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ASP__SSH__SetAdditionalParameters_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) additionalparameters().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "additionalparameters")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          additionalparameters().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters");
  }
  is_ifpresent = param.get_ifpresent();
}

void ASP__SSH__SetAdditionalParameters_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_additionalparameters.check_restriction(t_res, t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@SSHCLIENTasp_Types.ASP_SSH_SetAdditionalParameters");
}

boolean ASP__SSH__SetAdditionalParameters_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ASP__SSH__SetAdditionalParameters_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const ASP__SSH__Close& other_value)
{
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Close.");
return TRUE;
}

boolean operator==(null_type, const ASP__SSH__PseudoPrompt& other_value)
{
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_PseudoPrompt.");
return TRUE;
}

boolean operator==(null_type, const ASP__SSH__ClearPrompt& other_value)
{
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_ClearPrompt.");
return TRUE;
}

boolean operator==(null_type, const ASP__SSH__Connect& other_value)
{
other_value.must_bound("Comparison of an unbound value of type @SSHCLIENTasp_Types.ASP_SSH_Connect.");
return TRUE;
}


} /* end of namespace */
