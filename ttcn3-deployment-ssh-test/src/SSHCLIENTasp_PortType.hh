// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R4A
// for tango (tango@tango-VirtualBox) on Wed Jul 11 15:03:58 2018

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef SSHCLIENTasp__PortType_HH
#define SSHCLIENTasp__PortType_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "SSHCLIENTasp_Types.hh"

#if TTCN3_VERSION != 60400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef SSHCLIENTasp__PortType_HH
#endif

namespace SSHCLIENTasp__PortType {

/* Forward declarations of classes */

class SSHCLIENTasp__PT_BASE;
class SSHCLIENTasp__PT;

} /* end of namespace */

#ifndef SSHCLIENTasp__PortType_HH
#define SSHCLIENTasp__PortType_HH

namespace SSHCLIENTasp__PortType {

/* Class definitions */

class SSHCLIENTasp__PT_BASE : public PORT {
enum msg_selection { MESSAGE_0, MESSAGE_1, MESSAGE_2, MESSAGE_3 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
SSHCLIENTasp__Types::ASP__SSH__Close *message_0;
SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt *message_1;
SSHCLIENTasp__Types::ASP__SSH__Status *message_2;
CHARSTRING *message_3;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
SSHCLIENTasp__PT_BASE(const char *par_port_name);
~SSHCLIENTasp__PT_BASE();
void send(const SSHCLIENTasp__Types::ASP__SSH__SetPrompt& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetPrompt& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetPrompt_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetPrompt_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRegexPrompt& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRegexPrompt& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRegexPrompt_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRegexPrompt_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__ClearPrompt& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__ClearPrompt& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__ClearPrompt_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__ClearPrompt_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetMode& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetMode& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetMode_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetMode_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__Connect& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__Connect& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__Connect_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__Connect_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetUserID& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetUserID& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetUserID_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetUserID_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemoteHost& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemoteHost& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemoteHost_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemoteHost_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemotePort& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemotePort& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemotePort_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetRemotePort_template& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetAdditionalParameters& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetAdditionalParameters& send_par);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetAdditionalParameters_template& send_par, const COMPONENT& destination_component);
void send(const SSHCLIENTasp__Types::ASP__SSH__SetAdditionalParameters_template& send_par);
void send(const CHARSTRING& send_par, const COMPONENT& destination_component);
void send(const CHARSTRING& send_par);
void send(const CHARSTRING_template& send_par, const COMPONENT& destination_component);
void send(const CHARSTRING_template& send_par);
protected:
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__SetPrompt& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__SetRegexPrompt& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__ClearPrompt& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__SetMode& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__Connect& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__SetUserID& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__SetRemoteHost& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__SetRemotePort& send_par) = 0;
virtual void outgoing_send(const SSHCLIENTasp__Types::ASP__SSH__SetAdditionalParameters& send_par) = 0;
virtual void outgoing_send(const CHARSTRING& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const SSHCLIENTasp__Types::ASP__SSH__Close_template& value_template, SSHCLIENTasp__Types::ASP__SSH__Close *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const SSHCLIENTasp__Types::ASP__SSH__Close_template& value_template, SSHCLIENTasp__Types::ASP__SSH__Close *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const SSHCLIENTasp__Types::ASP__SSH__Close_template& value_template, SSHCLIENTasp__Types::ASP__SSH__Close *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt_template& value_template, SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt_template& value_template, SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt_template& value_template, SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const SSHCLIENTasp__Types::ASP__SSH__Status_template& value_template, SSHCLIENTasp__Types::ASP__SSH__Status *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const SSHCLIENTasp__Types::ASP__SSH__Status_template& value_template, SSHCLIENTasp__Types::ASP__SSH__Status *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const SSHCLIENTasp__Types::ASP__SSH__Status_template& value_template, SSHCLIENTasp__Types::ASP__SSH__Status *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status receive(const CHARSTRING_template& value_template, CHARSTRING *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status check_receive(const CHARSTRING_template& value_template, CHARSTRING *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
alt_status trigger(const CHARSTRING_template& value_template, CHARSTRING *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*);
private:
void incoming_message(const SSHCLIENTasp__Types::ASP__SSH__Close& incoming_par, component sender_component);
void incoming_message(const SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt& incoming_par, component sender_component);
void incoming_message(const SSHCLIENTasp__Types::ASP__SSH__Status& incoming_par, component sender_component);
void incoming_message(const CHARSTRING& incoming_par, component sender_component);
protected:
inline void incoming_message(const SSHCLIENTasp__Types::ASP__SSH__Close& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const SSHCLIENTasp__Types::ASP__SSH__PseudoPrompt& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const SSHCLIENTasp__Types::ASP__SSH__Status& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const CHARSTRING& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Global variable declarations */

extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "SSHCLIENTasp_PT.hh"

#endif
